{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getQueryHandlerAndSelector = exports.clearCustomQueryHandlers = exports.customQueryHandlerNames = exports.unregisterCustomQueryHandler = exports.registerCustomQueryHandler = void 0;\n\nconst AriaQueryHandler_js_1 = require(\"./AriaQueryHandler.js\");\n\nfunction makeQueryHandler(handler) {\n  const internalHandler = {};\n\n  if (handler.queryOne) {\n    internalHandler.queryOne = async (element, selector) => {\n      const jsHandle = await element.evaluateHandle(handler.queryOne, selector);\n      const elementHandle = jsHandle.asElement();\n      if (elementHandle) return elementHandle;\n      await jsHandle.dispose();\n      return null;\n    };\n\n    internalHandler.waitFor = (domWorld, selector, options) => domWorld.waitForSelectorInPage(handler.queryOne, selector, options);\n  }\n\n  if (handler.queryAll) {\n    internalHandler.queryAll = async (element, selector) => {\n      const jsHandle = await element.evaluateHandle(handler.queryAll, selector);\n      const properties = await jsHandle.getProperties();\n      await jsHandle.dispose();\n      const result = [];\n\n      for (const property of properties.values()) {\n        const elementHandle = property.asElement();\n        if (elementHandle) result.push(elementHandle);\n      }\n\n      return result;\n    };\n\n    internalHandler.queryAllArray = async (element, selector) => {\n      const resultHandle = await element.evaluateHandle(handler.queryAll, selector);\n      const arrayHandle = await resultHandle.evaluateHandle(res => Array.from(res));\n      return arrayHandle;\n    };\n  }\n\n  return internalHandler;\n}\n\nconst _defaultHandler = makeQueryHandler({\n  queryOne: (element, selector) => element.querySelector(selector),\n  queryAll: (element, selector) => element.querySelectorAll(selector)\n});\n\nconst pierceHandler = makeQueryHandler({\n  queryOne: (element, selector) => {\n    let found = null;\n\n    const search = root => {\n      const iter = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT);\n\n      do {\n        const currentNode = iter.currentNode;\n\n        if (currentNode.shadowRoot) {\n          search(currentNode.shadowRoot);\n        }\n\n        if (currentNode instanceof ShadowRoot) {\n          continue;\n        }\n\n        if (!found && currentNode.matches(selector)) {\n          found = currentNode;\n        }\n      } while (!found && iter.nextNode());\n    };\n\n    if (element instanceof Document) {\n      element = element.documentElement;\n    }\n\n    search(element);\n    return found;\n  },\n  queryAll: (element, selector) => {\n    const result = [];\n\n    const collect = root => {\n      const iter = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT);\n\n      do {\n        const currentNode = iter.currentNode;\n\n        if (currentNode.shadowRoot) {\n          collect(currentNode.shadowRoot);\n        }\n\n        if (currentNode instanceof ShadowRoot) {\n          continue;\n        }\n\n        if (currentNode.matches(selector)) {\n          result.push(currentNode);\n        }\n      } while (iter.nextNode());\n    };\n\n    if (element instanceof Document) {\n      element = element.documentElement;\n    }\n\n    collect(element);\n    return result;\n  }\n});\n\nconst _builtInHandlers = new Map([['aria', AriaQueryHandler_js_1.ariaHandler], ['pierce', pierceHandler]]);\n\nconst _queryHandlers = new Map(_builtInHandlers);\n/**\n * @internal\n */\n\n\nfunction registerCustomQueryHandler(name, handler) {\n  if (_queryHandlers.get(name)) throw new Error(`A custom query handler named \"${name}\" already exists`);\n  const isValidName = /^[a-zA-Z]+$/.test(name);\n  if (!isValidName) throw new Error(`Custom query handler names may only contain [a-zA-Z]`);\n  const internalHandler = makeQueryHandler(handler);\n\n  _queryHandlers.set(name, internalHandler);\n}\n\nexports.registerCustomQueryHandler = registerCustomQueryHandler;\n/**\n * @internal\n */\n\nfunction unregisterCustomQueryHandler(name) {\n  if (_queryHandlers.has(name) && !_builtInHandlers.has(name)) {\n    _queryHandlers.delete(name);\n  }\n}\n\nexports.unregisterCustomQueryHandler = unregisterCustomQueryHandler;\n/**\n * @internal\n */\n\nfunction customQueryHandlerNames() {\n  return [..._queryHandlers.keys()].filter(name => !_builtInHandlers.has(name));\n}\n\nexports.customQueryHandlerNames = customQueryHandlerNames;\n/**\n * @internal\n */\n\nfunction clearCustomQueryHandlers() {\n  customQueryHandlerNames().forEach(unregisterCustomQueryHandler);\n}\n\nexports.clearCustomQueryHandlers = clearCustomQueryHandlers;\n/**\n * @internal\n */\n\nfunction getQueryHandlerAndSelector(selector) {\n  const hasCustomQueryHandler = /^[a-zA-Z]+\\//.test(selector);\n  if (!hasCustomQueryHandler) return {\n    updatedSelector: selector,\n    queryHandler: _defaultHandler\n  };\n  const index = selector.indexOf('/');\n  const name = selector.slice(0, index);\n  const updatedSelector = selector.slice(index + 1);\n\n  const queryHandler = _queryHandlers.get(name);\n\n  if (!queryHandler) throw new Error(`Query set to use \"${name}\", but no query handler of that name was found`);\n  return {\n    updatedSelector,\n    queryHandler\n  };\n}\n\nexports.getQueryHandlerAndSelector = getQueryHandlerAndSelector;","map":{"version":3,"sources":["../../../../src/common/QueryHandler.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getQueryHandlerAndSelector = exports.clearCustomQueryHandlers = exports.customQueryHandlerNames = exports.unregisterCustomQueryHandler = exports.registerCustomQueryHandler = void 0;\nconst AriaQueryHandler_js_1 = require(\"./AriaQueryHandler.js\");\nfunction makeQueryHandler(handler) {\n    const internalHandler = {};\n    if (handler.queryOne) {\n        internalHandler.queryOne = async (element, selector) => {\n            const jsHandle = await element.evaluateHandle(handler.queryOne, selector);\n            const elementHandle = jsHandle.asElement();\n            if (elementHandle)\n                return elementHandle;\n            await jsHandle.dispose();\n            return null;\n        };\n        internalHandler.waitFor = (domWorld, selector, options) => domWorld.waitForSelectorInPage(handler.queryOne, selector, options);\n    }\n    if (handler.queryAll) {\n        internalHandler.queryAll = async (element, selector) => {\n            const jsHandle = await element.evaluateHandle(handler.queryAll, selector);\n            const properties = await jsHandle.getProperties();\n            await jsHandle.dispose();\n            const result = [];\n            for (const property of properties.values()) {\n                const elementHandle = property.asElement();\n                if (elementHandle)\n                    result.push(elementHandle);\n            }\n            return result;\n        };\n        internalHandler.queryAllArray = async (element, selector) => {\n            const resultHandle = await element.evaluateHandle(handler.queryAll, selector);\n            const arrayHandle = await resultHandle.evaluateHandle((res) => Array.from(res));\n            return arrayHandle;\n        };\n    }\n    return internalHandler;\n}\nconst _defaultHandler = makeQueryHandler({\n    queryOne: (element, selector) => element.querySelector(selector),\n    queryAll: (element, selector) => element.querySelectorAll(selector),\n});\nconst pierceHandler = makeQueryHandler({\n    queryOne: (element, selector) => {\n        let found = null;\n        const search = (root) => {\n            const iter = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT);\n            do {\n                const currentNode = iter.currentNode;\n                if (currentNode.shadowRoot) {\n                    search(currentNode.shadowRoot);\n                }\n                if (currentNode instanceof ShadowRoot) {\n                    continue;\n                }\n                if (!found && currentNode.matches(selector)) {\n                    found = currentNode;\n                }\n            } while (!found && iter.nextNode());\n        };\n        if (element instanceof Document) {\n            element = element.documentElement;\n        }\n        search(element);\n        return found;\n    },\n    queryAll: (element, selector) => {\n        const result = [];\n        const collect = (root) => {\n            const iter = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT);\n            do {\n                const currentNode = iter.currentNode;\n                if (currentNode.shadowRoot) {\n                    collect(currentNode.shadowRoot);\n                }\n                if (currentNode instanceof ShadowRoot) {\n                    continue;\n                }\n                if (currentNode.matches(selector)) {\n                    result.push(currentNode);\n                }\n            } while (iter.nextNode());\n        };\n        if (element instanceof Document) {\n            element = element.documentElement;\n        }\n        collect(element);\n        return result;\n    },\n});\nconst _builtInHandlers = new Map([\n    ['aria', AriaQueryHandler_js_1.ariaHandler],\n    ['pierce', pierceHandler],\n]);\nconst _queryHandlers = new Map(_builtInHandlers);\n/**\n * @internal\n */\nfunction registerCustomQueryHandler(name, handler) {\n    if (_queryHandlers.get(name))\n        throw new Error(`A custom query handler named \"${name}\" already exists`);\n    const isValidName = /^[a-zA-Z]+$/.test(name);\n    if (!isValidName)\n        throw new Error(`Custom query handler names may only contain [a-zA-Z]`);\n    const internalHandler = makeQueryHandler(handler);\n    _queryHandlers.set(name, internalHandler);\n}\nexports.registerCustomQueryHandler = registerCustomQueryHandler;\n/**\n * @internal\n */\nfunction unregisterCustomQueryHandler(name) {\n    if (_queryHandlers.has(name) && !_builtInHandlers.has(name)) {\n        _queryHandlers.delete(name);\n    }\n}\nexports.unregisterCustomQueryHandler = unregisterCustomQueryHandler;\n/**\n * @internal\n */\nfunction customQueryHandlerNames() {\n    return [..._queryHandlers.keys()].filter((name) => !_builtInHandlers.has(name));\n}\nexports.customQueryHandlerNames = customQueryHandlerNames;\n/**\n * @internal\n */\nfunction clearCustomQueryHandlers() {\n    customQueryHandlerNames().forEach(unregisterCustomQueryHandler);\n}\nexports.clearCustomQueryHandlers = clearCustomQueryHandlers;\n/**\n * @internal\n */\nfunction getQueryHandlerAndSelector(selector) {\n    const hasCustomQueryHandler = /^[a-zA-Z]+\\//.test(selector);\n    if (!hasCustomQueryHandler)\n        return { updatedSelector: selector, queryHandler: _defaultHandler };\n    const index = selector.indexOf('/');\n    const name = selector.slice(0, index);\n    const updatedSelector = selector.slice(index + 1);\n    const queryHandler = _queryHandlers.get(name);\n    if (!queryHandler)\n        throw new Error(`Query set to use \"${name}\", but no query handler of that name was found`);\n    return {\n        updatedSelector,\n        queryHandler,\n    };\n}\nexports.getQueryHandlerAndSelector = getQueryHandlerAndSelector;\n//# sourceMappingURL=QueryHandler.js.map"]},"metadata":{},"sourceType":"script"}