{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Puppeteer = void 0;\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst Errors_js_1 = require(\"./Errors.js\");\n\nconst DeviceDescriptors_js_1 = require(\"./DeviceDescriptors.js\");\n\nconst QueryHandler_js_1 = require(\"./QueryHandler.js\");\n\nconst BrowserConnector_js_1 = require(\"./BrowserConnector.js\");\n\nconst NetworkConditions_js_1 = require(\"./NetworkConditions.js\");\n/**\n * The main Puppeteer class.\n *\n * IMPORTANT: if you are using Puppeteer in a Node environment, you will get an\n * instance of {@link PuppeteerNode} when you import or require `puppeteer`.\n * That class extends `Puppeteer`, so has all the methods documented below as\n * well as all that are defined on {@link PuppeteerNode}.\n * @public\n */\n\n\nclass Puppeteer {\n  /**\n   * @internal\n   */\n  constructor(settings) {\n    this._changedProduct = false;\n    this._isPuppeteerCore = settings.isPuppeteerCore;\n  }\n  /**\n   * This method attaches Puppeteer to an existing browser instance.\n   *\n   * @remarks\n   *\n   * @param options - Set of configurable options to set on the browser.\n   * @returns Promise which resolves to browser instance.\n   */\n\n\n  connect(options) {\n    return BrowserConnector_js_1.connectToBrowser(options);\n  }\n  /**\n   * @remarks\n   * A list of devices to be used with `page.emulate(options)`. Actual list of devices can be found in {@link https://github.com/puppeteer/puppeteer/blob/main/src/common/DeviceDescriptors.ts | src/common/DeviceDescriptors.ts}.\n   *\n   * @example\n   *\n   * ```js\n   * const puppeteer = require('puppeteer');\n   * const iPhone = puppeteer.devices['iPhone 6'];\n   *\n   * (async () => {\n   *   const browser = await puppeteer.launch();\n   *   const page = await browser.newPage();\n   *   await page.emulate(iPhone);\n   *   await page.goto('https://www.google.com');\n   *   // other actions...\n   *   await browser.close();\n   * })();\n   * ```\n   *\n   */\n\n\n  get devices() {\n    return DeviceDescriptors_js_1.devicesMap;\n  }\n  /**\n   * @remarks\n   *\n   * Puppeteer methods might throw errors if they are unable to fulfill a request.\n   * For example, `page.waitForSelector(selector[, options])` might fail if\n   * the selector doesn't match any nodes during the given timeframe.\n   *\n   * For certain types of errors Puppeteer uses specific error classes.\n   * These classes are available via `puppeteer.errors`.\n   *\n   * @example\n   * An example of handling a timeout error:\n   * ```js\n   * try {\n   *   await page.waitForSelector('.foo');\n   * } catch (e) {\n   *   if (e instanceof puppeteer.errors.TimeoutError) {\n   *     // Do something if this is a timeout.\n   *   }\n   * }\n   * ```\n   */\n\n\n  get errors() {\n    return Errors_js_1.puppeteerErrors;\n  }\n  /**\n   * @remarks\n   * Returns a list of network conditions to be used with `page.emulateNetworkConditions(networkConditions)`. Actual list of predefined conditions can be found in {@link https://github.com/puppeteer/puppeteer/blob/main/src/common/NetworkConditions.ts | src/common/NetworkConditions.ts}.\n   *\n   * @example\n   *\n   * ```js\n   * const puppeteer = require('puppeteer');\n   * const slow3G = puppeteer.networkConditions['Slow 3G'];\n   *\n   * (async () => {\n   *   const browser = await puppeteer.launch();\n   *   const page = await browser.newPage();\n   *   await page.emulateNetworkConditions(slow3G);\n   *   await page.goto('https://www.google.com');\n   *   // other actions...\n   *   await browser.close();\n   * })();\n   * ```\n   *\n   */\n\n\n  get networkConditions() {\n    return NetworkConditions_js_1.networkConditions;\n  }\n  /**\n   * Registers a {@link CustomQueryHandler | custom query handler}. After\n   * registration, the handler can be used everywhere where a selector is\n   * expected by prepending the selection string with `<name>/`. The name is\n   * only allowed to consist of lower- and upper case latin letters.\n   * @example\n   * ```\n   * puppeteer.registerCustomQueryHandler('text', { … });\n   * const aHandle = await page.$('text/…');\n   * ```\n   * @param name - The name that the custom query handler will be registered under.\n   * @param queryHandler - The {@link CustomQueryHandler | custom query handler} to\n   * register.\n   */\n\n\n  registerCustomQueryHandler(name, queryHandler) {\n    QueryHandler_js_1.registerCustomQueryHandler(name, queryHandler);\n  }\n  /**\n   * @param name - The name of the query handler to unregistered.\n   */\n\n\n  unregisterCustomQueryHandler(name) {\n    QueryHandler_js_1.unregisterCustomQueryHandler(name);\n  }\n  /**\n   * @returns a list with the names of all registered custom query handlers.\n   */\n\n\n  customQueryHandlerNames() {\n    return QueryHandler_js_1.customQueryHandlerNames();\n  }\n  /**\n   * Clears all registered handlers.\n   */\n\n\n  clearCustomQueryHandlers() {\n    QueryHandler_js_1.clearCustomQueryHandlers();\n  }\n\n}\n\nexports.Puppeteer = Puppeteer;","map":{"version":3,"sources":["../../../../src/common/Puppeteer.ts"],"names":[],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;AAcG;;AACH,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAEA,MAAA,sBAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AAEA,MAAA,iBAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAQA,MAAA,qBAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AACA,MAAA,sBAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;AAoBA;;;;;;;;AAQG;;;AACH,MAAa,SAAb,CAAsB;AAIpB;;AAEG;AACH,EAAA,WAAA,CAAY,QAAZ,EAA6C;AALnC,SAAA,eAAA,GAAkB,KAAlB;AAMR,SAAK,gBAAL,GAAwB,QAAQ,CAAC,eAAjC;AACD;AAED;;;;;;;AAOG;;;AACH,EAAA,OAAO,CAAC,OAAD,EAAwB;AAC7B,WAAO,qBAAA,CAAA,gBAAA,CAAiB,OAAjB,CAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;AAoBG;;;AACQ,MAAP,OAAO,GAAA;AACT,WAAO,sBAAA,CAAA,UAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;AAqBG;;;AACO,MAAN,MAAM,GAAA;AACR,WAAO,WAAA,CAAA,eAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;AAoBG;;;AACkB,MAAjB,iBAAiB,GAAA;AACnB,WAAO,sBAAA,CAAA,iBAAP;AACD;AAED;;;;;;;;;;;;;AAaG;;;AACH,EAAA,0BAA0B,CACxB,IADwB,EAExB,YAFwB,EAEQ;AAEhC,IAAA,iBAAA,CAAA,0BAAA,CAA2B,IAA3B,EAAiC,YAAjC;AACD;AAED;;AAEG;;;AACH,EAAA,4BAA4B,CAAC,IAAD,EAAa;AACvC,IAAA,iBAAA,CAAA,4BAAA,CAA6B,IAA7B;AACD;AAED;;AAEG;;;AACH,EAAA,uBAAuB,GAAA;AACrB,WAAO,iBAAA,CAAA,uBAAA,EAAP;AACD;AAED;;AAEG;;;AACH,EAAA,wBAAwB,GAAA;AACtB,IAAA,iBAAA,CAAA,wBAAA;AACD;;AA3ImB;;AAAtB,OAAA,CAAA,SAAA,GAAA,SAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Puppeteer = void 0;\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst Errors_js_1 = require(\"./Errors.js\");\nconst DeviceDescriptors_js_1 = require(\"./DeviceDescriptors.js\");\nconst QueryHandler_js_1 = require(\"./QueryHandler.js\");\nconst BrowserConnector_js_1 = require(\"./BrowserConnector.js\");\nconst NetworkConditions_js_1 = require(\"./NetworkConditions.js\");\n/**\n * The main Puppeteer class.\n *\n * IMPORTANT: if you are using Puppeteer in a Node environment, you will get an\n * instance of {@link PuppeteerNode} when you import or require `puppeteer`.\n * That class extends `Puppeteer`, so has all the methods documented below as\n * well as all that are defined on {@link PuppeteerNode}.\n * @public\n */\nclass Puppeteer {\n    /**\n     * @internal\n     */\n    constructor(settings) {\n        this._changedProduct = false;\n        this._isPuppeteerCore = settings.isPuppeteerCore;\n    }\n    /**\n     * This method attaches Puppeteer to an existing browser instance.\n     *\n     * @remarks\n     *\n     * @param options - Set of configurable options to set on the browser.\n     * @returns Promise which resolves to browser instance.\n     */\n    connect(options) {\n        return BrowserConnector_js_1.connectToBrowser(options);\n    }\n    /**\n     * @remarks\n     * A list of devices to be used with `page.emulate(options)`. Actual list of devices can be found in {@link https://github.com/puppeteer/puppeteer/blob/main/src/common/DeviceDescriptors.ts | src/common/DeviceDescriptors.ts}.\n     *\n     * @example\n     *\n     * ```js\n     * const puppeteer = require('puppeteer');\n     * const iPhone = puppeteer.devices['iPhone 6'];\n     *\n     * (async () => {\n     *   const browser = await puppeteer.launch();\n     *   const page = await browser.newPage();\n     *   await page.emulate(iPhone);\n     *   await page.goto('https://www.google.com');\n     *   // other actions...\n     *   await browser.close();\n     * })();\n     * ```\n     *\n     */\n    get devices() {\n        return DeviceDescriptors_js_1.devicesMap;\n    }\n    /**\n     * @remarks\n     *\n     * Puppeteer methods might throw errors if they are unable to fulfill a request.\n     * For example, `page.waitForSelector(selector[, options])` might fail if\n     * the selector doesn't match any nodes during the given timeframe.\n     *\n     * For certain types of errors Puppeteer uses specific error classes.\n     * These classes are available via `puppeteer.errors`.\n     *\n     * @example\n     * An example of handling a timeout error:\n     * ```js\n     * try {\n     *   await page.waitForSelector('.foo');\n     * } catch (e) {\n     *   if (e instanceof puppeteer.errors.TimeoutError) {\n     *     // Do something if this is a timeout.\n     *   }\n     * }\n     * ```\n     */\n    get errors() {\n        return Errors_js_1.puppeteerErrors;\n    }\n    /**\n     * @remarks\n     * Returns a list of network conditions to be used with `page.emulateNetworkConditions(networkConditions)`. Actual list of predefined conditions can be found in {@link https://github.com/puppeteer/puppeteer/blob/main/src/common/NetworkConditions.ts | src/common/NetworkConditions.ts}.\n     *\n     * @example\n     *\n     * ```js\n     * const puppeteer = require('puppeteer');\n     * const slow3G = puppeteer.networkConditions['Slow 3G'];\n     *\n     * (async () => {\n     *   const browser = await puppeteer.launch();\n     *   const page = await browser.newPage();\n     *   await page.emulateNetworkConditions(slow3G);\n     *   await page.goto('https://www.google.com');\n     *   // other actions...\n     *   await browser.close();\n     * })();\n     * ```\n     *\n     */\n    get networkConditions() {\n        return NetworkConditions_js_1.networkConditions;\n    }\n    /**\n     * Registers a {@link CustomQueryHandler | custom query handler}. After\n     * registration, the handler can be used everywhere where a selector is\n     * expected by prepending the selection string with `<name>/`. The name is\n     * only allowed to consist of lower- and upper case latin letters.\n     * @example\n     * ```\n     * puppeteer.registerCustomQueryHandler('text', { … });\n     * const aHandle = await page.$('text/…');\n     * ```\n     * @param name - The name that the custom query handler will be registered under.\n     * @param queryHandler - The {@link CustomQueryHandler | custom query handler} to\n     * register.\n     */\n    registerCustomQueryHandler(name, queryHandler) {\n        QueryHandler_js_1.registerCustomQueryHandler(name, queryHandler);\n    }\n    /**\n     * @param name - The name of the query handler to unregistered.\n     */\n    unregisterCustomQueryHandler(name) {\n        QueryHandler_js_1.unregisterCustomQueryHandler(name);\n    }\n    /**\n     * @returns a list with the names of all registered custom query handlers.\n     */\n    customQueryHandlerNames() {\n        return QueryHandler_js_1.customQueryHandlerNames();\n    }\n    /**\n     * Clears all registered handlers.\n     */\n    clearCustomQueryHandlers() {\n        QueryHandler_js_1.clearCustomQueryHandlers();\n    }\n}\nexports.Puppeteer = Puppeteer;\n//# sourceMappingURL=Puppeteer.js.map"]},"metadata":{},"sourceType":"script"}