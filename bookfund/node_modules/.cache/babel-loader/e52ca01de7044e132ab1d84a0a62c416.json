{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PipeTransport = void 0;\n/**\n * Copyright 2018 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst helper_js_1 = require(\"../common/helper.js\");\n\nclass PipeTransport {\n  constructor(pipeWrite, pipeRead) {\n    this._pipeWrite = pipeWrite;\n    this._pendingMessage = '';\n    this._eventListeners = [helper_js_1.helper.addEventListener(pipeRead, 'data', buffer => this._dispatch(buffer)), helper_js_1.helper.addEventListener(pipeRead, 'close', () => {\n      if (this.onclose) this.onclose.call(null);\n    }), helper_js_1.helper.addEventListener(pipeRead, 'error', helper_js_1.debugError), helper_js_1.helper.addEventListener(pipeWrite, 'error', helper_js_1.debugError)];\n    this.onmessage = null;\n    this.onclose = null;\n  }\n\n  send(message) {\n    this._pipeWrite.write(message);\n\n    this._pipeWrite.write('\\0');\n  }\n\n  _dispatch(buffer) {\n    let end = buffer.indexOf('\\0');\n\n    if (end === -1) {\n      this._pendingMessage += buffer.toString();\n      return;\n    }\n\n    const message = this._pendingMessage + buffer.toString(undefined, 0, end);\n    if (this.onmessage) this.onmessage.call(null, message);\n    let start = end + 1;\n    end = buffer.indexOf('\\0', start);\n\n    while (end !== -1) {\n      if (this.onmessage) this.onmessage.call(null, buffer.toString(undefined, start, end));\n      start = end + 1;\n      end = buffer.indexOf('\\0', start);\n    }\n\n    this._pendingMessage = buffer.toString(undefined, start);\n  }\n\n  close() {\n    this._pipeWrite = null;\n    helper_js_1.helper.removeEventListeners(this._eventListeners);\n  }\n\n}\n\nexports.PipeTransport = PipeTransport;","map":{"version":3,"sources":["../../../../src/node/PipeTransport.ts"],"names":[],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;AAcG;;AACH,MAAA,WAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AAOA,MAAa,aAAb,CAA0B;AAQxB,EAAA,WAAA,CACE,SADF,EAEE,QAFF,EAEiC;AAE/B,SAAK,UAAL,GAAkB,SAAlB;AACA,SAAK,eAAL,GAAuB,EAAvB;AACA,SAAK,eAAL,GAAuB,CACrB,WAAA,CAAA,MAAA,CAAO,gBAAP,CAAwB,QAAxB,EAAkC,MAAlC,EAA2C,MAAD,IACxC,KAAK,SAAL,CAAe,MAAf,CADF,CADqB,EAIrB,WAAA,CAAA,MAAA,CAAO,gBAAP,CAAwB,QAAxB,EAAkC,OAAlC,EAA2C,MAAK;AAC9C,UAAI,KAAK,OAAT,EAAkB,KAAK,OAAL,CAAa,IAAb,CAAkB,IAAlB;AACnB,KAFD,CAJqB,EAOrB,WAAA,CAAA,MAAA,CAAO,gBAAP,CAAwB,QAAxB,EAAkC,OAAlC,EAA2C,WAAA,CAAA,UAA3C,CAPqB,EAQrB,WAAA,CAAA,MAAA,CAAO,gBAAP,CAAwB,SAAxB,EAAmC,OAAnC,EAA4C,WAAA,CAAA,UAA5C,CARqB,CAAvB;AAUA,SAAK,SAAL,GAAiB,IAAjB;AACA,SAAK,OAAL,GAAe,IAAf;AACD;;AAED,EAAA,IAAI,CAAC,OAAD,EAAgB;AAClB,SAAK,UAAL,CAAgB,KAAhB,CAAsB,OAAtB;;AACA,SAAK,UAAL,CAAgB,KAAhB,CAAsB,IAAtB;AACD;;AAED,EAAA,SAAS,CAAC,MAAD,EAAe;AACtB,QAAI,GAAG,GAAG,MAAM,CAAC,OAAP,CAAe,IAAf,CAAV;;AACA,QAAI,GAAG,KAAK,CAAC,CAAb,EAAgB;AACd,WAAK,eAAL,IAAwB,MAAM,CAAC,QAAP,EAAxB;AACA;AACD;;AACD,UAAM,OAAO,GAAG,KAAK,eAAL,GAAuB,MAAM,CAAC,QAAP,CAAgB,SAAhB,EAA2B,CAA3B,EAA8B,GAA9B,CAAvC;AACA,QAAI,KAAK,SAAT,EAAoB,KAAK,SAAL,CAAe,IAAf,CAAoB,IAApB,EAA0B,OAA1B;AAEpB,QAAI,KAAK,GAAG,GAAG,GAAG,CAAlB;AACA,IAAA,GAAG,GAAG,MAAM,CAAC,OAAP,CAAe,IAAf,EAAqB,KAArB,CAAN;;AACA,WAAO,GAAG,KAAK,CAAC,CAAhB,EAAmB;AACjB,UAAI,KAAK,SAAT,EACE,KAAK,SAAL,CAAe,IAAf,CAAoB,IAApB,EAA0B,MAAM,CAAC,QAAP,CAAgB,SAAhB,EAA2B,KAA3B,EAAkC,GAAlC,CAA1B;AACF,MAAA,KAAK,GAAG,GAAG,GAAG,CAAd;AACA,MAAA,GAAG,GAAG,MAAM,CAAC,OAAP,CAAe,IAAf,EAAqB,KAArB,CAAN;AACD;;AACD,SAAK,eAAL,GAAuB,MAAM,CAAC,QAAP,CAAgB,SAAhB,EAA2B,KAA3B,CAAvB;AACD;;AAED,EAAA,KAAK,GAAA;AACH,SAAK,UAAL,GAAkB,IAAlB;AACA,IAAA,WAAA,CAAA,MAAA,CAAO,oBAAP,CAA4B,KAAK,eAAjC;AACD;;AAxDuB;;AAA1B,OAAA,CAAA,aAAA,GAAA,aAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PipeTransport = void 0;\n/**\n * Copyright 2018 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst helper_js_1 = require(\"../common/helper.js\");\nclass PipeTransport {\n    constructor(pipeWrite, pipeRead) {\n        this._pipeWrite = pipeWrite;\n        this._pendingMessage = '';\n        this._eventListeners = [\n            helper_js_1.helper.addEventListener(pipeRead, 'data', (buffer) => this._dispatch(buffer)),\n            helper_js_1.helper.addEventListener(pipeRead, 'close', () => {\n                if (this.onclose)\n                    this.onclose.call(null);\n            }),\n            helper_js_1.helper.addEventListener(pipeRead, 'error', helper_js_1.debugError),\n            helper_js_1.helper.addEventListener(pipeWrite, 'error', helper_js_1.debugError),\n        ];\n        this.onmessage = null;\n        this.onclose = null;\n    }\n    send(message) {\n        this._pipeWrite.write(message);\n        this._pipeWrite.write('\\0');\n    }\n    _dispatch(buffer) {\n        let end = buffer.indexOf('\\0');\n        if (end === -1) {\n            this._pendingMessage += buffer.toString();\n            return;\n        }\n        const message = this._pendingMessage + buffer.toString(undefined, 0, end);\n        if (this.onmessage)\n            this.onmessage.call(null, message);\n        let start = end + 1;\n        end = buffer.indexOf('\\0', start);\n        while (end !== -1) {\n            if (this.onmessage)\n                this.onmessage.call(null, buffer.toString(undefined, start, end));\n            start = end + 1;\n            end = buffer.indexOf('\\0', start);\n        }\n        this._pendingMessage = buffer.toString(undefined, start);\n    }\n    close() {\n        this._pipeWrite = null;\n        helper_js_1.helper.removeEventListeners(this._eventListeners);\n    }\n}\nexports.PipeTransport = PipeTransport;\n//# sourceMappingURL=PipeTransport.js.map"]},"metadata":{},"sourceType":"script"}