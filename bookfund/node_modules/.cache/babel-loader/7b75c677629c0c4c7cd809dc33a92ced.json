{"ast":null,"code":"var _jsxFileName = \"/Users/simoncohen/Flatiron/code/Mod5/bookfund/frontend-bookfund/bookfund/src/components/pages/BookPage/BookPage.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function BookPage({\n  setSavedBooks,\n  savedBooks\n}) {\n  _s();\n\n  const [book, setBook] = useState(null);\n  const params = useParams();\n  let foundBook = null;\n  useEffect(() => {\n    foundBook = savedBooks.find(book => book.api_id === params.id);\n    setBook(foundBook);\n\n    if (!foundBook) {\n      fetch(`https://www.googleapis.com/books/v1/volumes/${params.id}`).then(response => response.json()).then(data => {\n        setBook({\n          title: data.volumeInfo.title,\n          subtitle: data.volumeInfo.subtitle,\n          authors: data.volumeInfo.authors,\n          publisher: data.volumeInfo.publisher,\n          publishedDate: data.volumeInfo.publishedDate,\n          description: data.volumeInfo.description,\n          image_url: data.volumeInfo.imageLinks.thumbnail,\n          api_id: data.id,\n          waitings: null\n        });\n      });\n    }\n  }, []);\n\n  function waitListRequestAndStoreInDBRequest() {\n    let confObj = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(book)\n    };\n    fetch('http://localhost:3000/books', confObj).then(response => response.json()).then(data => {\n      console.log(data); // if (data.error){\n      //     alert(\"Username must be unique\")\n      // }\n      // else{\n      //     setUser(data)\n      // }\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: book ? book.image_url : \"N/A\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: book ? book.title : \"N/A\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: book ? book.subtitle : \"N/A\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"by: \", book ? book.authors : \"N/A\", \" (\", book ? book.publishedDate : \"N/A\", \") \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Publishing House: \", book ? book.publisher : \"N/A\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Description: \", book ? book.description : \"N/A\", \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Waitlist: \", book ? book.waitings : \"N/A\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: waitListRequestAndStoreInDBRequest,\n      children: \"Jump on the Waitlist for this book\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(BookPage, \"BdE7h/IXV9ZyMRITUS+sTsE46jE=\", false, function () {\n  return [useParams];\n});\n\n_c = BookPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"BookPage\");","map":{"version":3,"sources":["/Users/simoncohen/Flatiron/code/Mod5/bookfund/frontend-bookfund/bookfund/src/components/pages/BookPage/BookPage.js"],"names":["useEffect","useState","useParams","BookPage","setSavedBooks","savedBooks","book","setBook","params","foundBook","find","api_id","id","fetch","then","response","json","data","title","volumeInfo","subtitle","authors","publisher","publishedDate","description","image_url","imageLinks","thumbnail","waitings","waitListRequestAndStoreInDBRequest","confObj","method","headers","body","JSON","stringify","console","log"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nexport default function BookPage({setSavedBooks, savedBooks}){\n\n    const[book, setBook] = useState (null)\n    const params = useParams()\n    let foundBook = null\n\n\n    useEffect(()=>{\n        foundBook = savedBooks.find(book=>book.api_id===params.id) \n        setBook(foundBook)\n        if (!foundBook){ \n            fetch(`https://www.googleapis.com/books/v1/volumes/${params.id}`)\n            .then(response => response.json())\n            .then(data=>{\n                setBook({\n                    title: data.volumeInfo.title, \n                    subtitle: data.volumeInfo.subtitle, \n                    authors: data.volumeInfo.authors, \n                    publisher: data.volumeInfo.publisher, \n                    publishedDate: data.volumeInfo.publishedDate, \n                    description: data.volumeInfo.description, \n                    image_url: data.volumeInfo.imageLinks.thumbnail, \n                    api_id: data.id,\n                    waitings: null,\n                })\n            })\n\n        }\n    \n    },[])\n    \n\n\n\n    function waitListRequestAndStoreInDBRequest (){\n        let confObj = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(book),\n        }\n        \n        fetch('http://localhost:3000/books', confObj)\n        .then(response=>response.json())\n        .then(data=>{\n            console.log(data)\n            // if (data.error){\n            //     alert(\"Username must be unique\")\n            // }\n            // else{\n            //     setUser(data)\n            // }\n        })\n    }\n\n\n\n    return(\n        <>\n\n            <img src={ book ? book.image_url: \"N/A\" }></img>\n            <h2>{book? book.title: \"N/A\"}</h2>\n            <h3>{book? book.subtitle: \"N/A\"}</h3>\n            <p>by: {book? book.authors: \"N/A\"} ({book? book.publishedDate: \"N/A\"}) </p>\n            <p>Publishing House: {book? book.publisher: \"N/A\"}</p>\n            <p>Description: {book? book.description: \"N/A\"} </p>\n\n            <p>Waitlist: {book ? book.waitings : \"N/A\"}</p>\n\n            <button onClick={waitListRequestAndStoreInDBRequest}>Jump on the Waitlist for this book</button>\n\n        </>\n    )\n\n}"]},"metadata":{},"sourceType":"module"}