{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Touchscreen = exports.Mouse = exports.Keyboard = void 0;\n\nconst assert_js_1 = require(\"./assert.js\");\n\nconst USKeyboardLayout_js_1 = require(\"./USKeyboardLayout.js\");\n/**\n * Keyboard provides an api for managing a virtual keyboard.\n * The high level api is {@link Keyboard.\"type\"},\n * which takes raw characters and generates proper keydown, keypress/input,\n * and keyup events on your page.\n *\n * @remarks\n * For finer control, you can use {@link Keyboard.down},\n * {@link Keyboard.up}, and {@link Keyboard.sendCharacter}\n * to manually fire events as if they were generated from a real keyboard.\n *\n * On MacOS, keyboard shortcuts like `⌘ A` -\\> Select All do not work.\n * See {@link https://github.com/puppeteer/puppeteer/issues/1313 | #1313}.\n *\n * @example\n * An example of holding down `Shift` in order to select and delete some text:\n * ```js\n * await page.keyboard.type('Hello World!');\n * await page.keyboard.press('ArrowLeft');\n *\n * await page.keyboard.down('Shift');\n * for (let i = 0; i < ' World'.length; i++)\n *   await page.keyboard.press('ArrowLeft');\n * await page.keyboard.up('Shift');\n *\n * await page.keyboard.press('Backspace');\n * // Result text will end up saying 'Hello!'\n * ```\n *\n * @example\n * An example of pressing `A`\n * ```js\n * await page.keyboard.down('Shift');\n * await page.keyboard.press('KeyA');\n * await page.keyboard.up('Shift');\n * ```\n *\n * @public\n */\n\n\nclass Keyboard {\n  /** @internal */\n  constructor(client) {\n    /** @internal */\n    this._modifiers = 0;\n    this._pressedKeys = new Set();\n    this._client = client;\n  }\n  /**\n   * Dispatches a `keydown` event.\n   *\n   * @remarks\n   * If `key` is a single character and no modifier keys besides `Shift`\n   * are being held down, a `keypress`/`input` event will also generated.\n   * The `text` option can be specified to force an input event to be generated.\n   * If `key` is a modifier key, `Shift`, `Meta`, `Control`, or `Alt`,\n   * subsequent key presses will be sent with that modifier active.\n   * To release the modifier key, use {@link Keyboard.up}.\n   *\n   * After the key is pressed once, subsequent calls to\n   * {@link Keyboard.down} will have\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat | repeat}\n   * set to true. To release the key, use {@link Keyboard.up}.\n   *\n   * Modifier keys DO influence {@link Keyboard.down}.\n   * Holding down `Shift` will type the text in upper case.\n   *\n   * @param key - Name of key to press, such as `ArrowLeft`.\n   * See {@link KeyInput} for a list of all key names.\n   *\n   * @param options - An object of options. Accepts text which, if specified,\n   * generates an input event with this text.\n   */\n\n\n  async down(key, options = {\n    text: undefined\n  }) {\n    const description = this._keyDescriptionForString(key);\n\n    const autoRepeat = this._pressedKeys.has(description.code);\n\n    this._pressedKeys.add(description.code);\n\n    this._modifiers |= this._modifierBit(description.key);\n    const text = options.text === undefined ? description.text : options.text;\n    await this._client.send('Input.dispatchKeyEvent', {\n      type: text ? 'keyDown' : 'rawKeyDown',\n      modifiers: this._modifiers,\n      windowsVirtualKeyCode: description.keyCode,\n      code: description.code,\n      key: description.key,\n      text: text,\n      unmodifiedText: text,\n      autoRepeat,\n      location: description.location,\n      isKeypad: description.location === 3\n    });\n  }\n\n  _modifierBit(key) {\n    if (key === 'Alt') return 1;\n    if (key === 'Control') return 2;\n    if (key === 'Meta') return 4;\n    if (key === 'Shift') return 8;\n    return 0;\n  }\n\n  _keyDescriptionForString(keyString) {\n    const shift = this._modifiers & 8;\n    const description = {\n      key: '',\n      keyCode: 0,\n      code: '',\n      text: '',\n      location: 0\n    };\n    const definition = USKeyboardLayout_js_1.keyDefinitions[keyString];\n    assert_js_1.assert(definition, `Unknown key: \"${keyString}\"`);\n    if (definition.key) description.key = definition.key;\n    if (shift && definition.shiftKey) description.key = definition.shiftKey;\n    if (definition.keyCode) description.keyCode = definition.keyCode;\n    if (shift && definition.shiftKeyCode) description.keyCode = definition.shiftKeyCode;\n    if (definition.code) description.code = definition.code;\n    if (definition.location) description.location = definition.location;\n    if (description.key.length === 1) description.text = description.key;\n    if (definition.text) description.text = definition.text;\n    if (shift && definition.shiftText) description.text = definition.shiftText; // if any modifiers besides shift are pressed, no text should be sent\n\n    if (this._modifiers & ~8) description.text = '';\n    return description;\n  }\n  /**\n   * Dispatches a `keyup` event.\n   *\n   * @param key - Name of key to release, such as `ArrowLeft`.\n   * See {@link KeyInput | KeyInput}\n   * for a list of all key names.\n   */\n\n\n  async up(key) {\n    const description = this._keyDescriptionForString(key);\n\n    this._modifiers &= ~this._modifierBit(description.key);\n\n    this._pressedKeys.delete(description.code);\n\n    await this._client.send('Input.dispatchKeyEvent', {\n      type: 'keyUp',\n      modifiers: this._modifiers,\n      key: description.key,\n      windowsVirtualKeyCode: description.keyCode,\n      code: description.code,\n      location: description.location\n    });\n  }\n  /**\n   * Dispatches a `keypress` and `input` event.\n   * This does not send a `keydown` or `keyup` event.\n   *\n   * @remarks\n   * Modifier keys DO NOT effect {@link Keyboard.sendCharacter | Keyboard.sendCharacter}.\n   * Holding down `Shift` will not type the text in upper case.\n   *\n   * @example\n   * ```js\n   * page.keyboard.sendCharacter('嗨');\n   * ```\n   *\n   * @param char - Character to send into the page.\n   */\n\n\n  async sendCharacter(char) {\n    await this._client.send('Input.insertText', {\n      text: char\n    });\n  }\n\n  charIsKey(char) {\n    return !!USKeyboardLayout_js_1.keyDefinitions[char];\n  }\n  /**\n   * Sends a `keydown`, `keypress`/`input`,\n   * and `keyup` event for each character in the text.\n   *\n   * @remarks\n   * To press a special key, like `Control` or `ArrowDown`,\n   * use {@link Keyboard.press}.\n   *\n   * Modifier keys DO NOT effect `keyboard.type`.\n   * Holding down `Shift` will not type the text in upper case.\n   *\n   * @example\n   * ```js\n   * await page.keyboard.type('Hello'); // Types instantly\n   * await page.keyboard.type('World', {delay: 100}); // Types slower, like a user\n   * ```\n   *\n   * @param text - A text to type into a focused element.\n   * @param options - An object of options. Accepts delay which,\n   * if specified, is the time to wait between `keydown` and `keyup` in milliseconds.\n   * Defaults to 0.\n   */\n\n\n  async type(text, options = {}) {\n    const delay = options.delay || null;\n\n    for (const char of text) {\n      if (this.charIsKey(char)) {\n        await this.press(char, {\n          delay\n        });\n      } else {\n        if (delay) await new Promise(f => setTimeout(f, delay));\n        await this.sendCharacter(char);\n      }\n    }\n  }\n  /**\n   * Shortcut for {@link Keyboard.down}\n   * and {@link Keyboard.up}.\n   *\n   * @remarks\n   * If `key` is a single character and no modifier keys besides `Shift`\n   * are being held down, a `keypress`/`input` event will also generated.\n   * The `text` option can be specified to force an input event to be generated.\n   *\n   * Modifier keys DO effect {@link Keyboard.press}.\n   * Holding down `Shift` will type the text in upper case.\n   *\n   * @param key - Name of key to press, such as `ArrowLeft`.\n   * See {@link KeyInput} for a list of all key names.\n   *\n   * @param options - An object of options. Accepts text which, if specified,\n   * generates an input event with this text. Accepts delay which,\n   * if specified, is the time to wait between `keydown` and `keyup` in milliseconds.\n   * Defaults to 0.\n   */\n\n\n  async press(key, options = {}) {\n    const {\n      delay = null\n    } = options;\n    await this.down(key, options);\n    if (delay) await new Promise(f => setTimeout(f, options.delay));\n    await this.up(key);\n  }\n\n}\n\nexports.Keyboard = Keyboard;\n/**\n * The Mouse class operates in main-frame CSS pixels\n * relative to the top-left corner of the viewport.\n * @remarks\n * Every `page` object has its own Mouse, accessible with [`page.mouse`](#pagemouse).\n *\n * @example\n * ```js\n * // Using ‘page.mouse’ to trace a 100x100 square.\n * await page.mouse.move(0, 0);\n * await page.mouse.down();\n * await page.mouse.move(0, 100);\n * await page.mouse.move(100, 100);\n * await page.mouse.move(100, 0);\n * await page.mouse.move(0, 0);\n * await page.mouse.up();\n * ```\n *\n * **Note**: The mouse events trigger synthetic `MouseEvent`s.\n * This means that it does not fully replicate the functionality of what a normal user\n * would be able to do with their mouse.\n *\n * For example, dragging and selecting text is not possible using `page.mouse`.\n * Instead, you can use the {@link https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/getSelection | `DocumentOrShadowRoot.getSelection()`} functionality implemented in the platform.\n *\n * @example\n * For example, if you want to select all content between nodes:\n * ```js\n * await page.evaluate((from, to) => {\n *   const selection = from.getRootNode().getSelection();\n *   const range = document.createRange();\n *   range.setStartBefore(from);\n *   range.setEndAfter(to);\n *   selection.removeAllRanges();\n *   selection.addRange(range);\n * }, fromJSHandle, toJSHandle);\n * ```\n * If you then would want to copy-paste your selection, you can use the clipboard api:\n * ```js\n * // The clipboard api does not allow you to copy, unless the tab is focused.\n * await page.bringToFront();\n * await page.evaluate(() => {\n *   // Copy the selected content to the clipboard\n *   document.execCommand('copy');\n *   // Obtain the content of the clipboard as a string\n *   return navigator.clipboard.readText();\n * });\n * ```\n * **Note**: If you want access to the clipboard API,\n * you have to give it permission to do so:\n * ```js\n * await browser.defaultBrowserContext().overridePermissions(\n *   '<your origin>', ['clipboard-read', 'clipboard-write']\n * );\n * ```\n * @public\n */\n\nclass Mouse {\n  /**\n   * @internal\n   */\n  constructor(client, keyboard) {\n    this._x = 0;\n    this._y = 0;\n    this._button = 'none';\n    this._client = client;\n    this._keyboard = keyboard;\n  }\n  /**\n   * Dispatches a `mousemove` event.\n   * @param x - Horizontal position of the mouse.\n   * @param y - Vertical position of the mouse.\n   * @param options - Optional object. If specified, the `steps` property\n   * sends intermediate `mousemove` events when set to `1` (default).\n   */\n\n\n  async move(x, y, options = {}) {\n    const {\n      steps = 1\n    } = options;\n    const fromX = this._x,\n          fromY = this._y;\n    this._x = x;\n    this._y = y;\n\n    for (let i = 1; i <= steps; i++) {\n      await this._client.send('Input.dispatchMouseEvent', {\n        type: 'mouseMoved',\n        button: this._button,\n        x: fromX + (this._x - fromX) * (i / steps),\n        y: fromY + (this._y - fromY) * (i / steps),\n        modifiers: this._keyboard._modifiers\n      });\n    }\n  }\n  /**\n   * Shortcut for `mouse.move`, `mouse.down` and `mouse.up`.\n   * @param x - Horizontal position of the mouse.\n   * @param y - Vertical position of the mouse.\n   * @param options - Optional `MouseOptions`.\n   */\n\n\n  async click(x, y, options = {}) {\n    const {\n      delay = null\n    } = options;\n\n    if (delay !== null) {\n      await Promise.all([this.move(x, y), this.down(options)]);\n      await new Promise(f => setTimeout(f, delay));\n      await this.up(options);\n    } else {\n      await Promise.all([this.move(x, y), this.down(options), this.up(options)]);\n    }\n  }\n  /**\n   * Dispatches a `mousedown` event.\n   * @param options - Optional `MouseOptions`.\n   */\n\n\n  async down(options = {}) {\n    const {\n      button = 'left',\n      clickCount = 1\n    } = options;\n    this._button = button;\n    await this._client.send('Input.dispatchMouseEvent', {\n      type: 'mousePressed',\n      button,\n      x: this._x,\n      y: this._y,\n      modifiers: this._keyboard._modifiers,\n      clickCount\n    });\n  }\n  /**\n   * Dispatches a `mouseup` event.\n   * @param options - Optional `MouseOptions`.\n   */\n\n\n  async up(options = {}) {\n    const {\n      button = 'left',\n      clickCount = 1\n    } = options;\n    this._button = 'none';\n    await this._client.send('Input.dispatchMouseEvent', {\n      type: 'mouseReleased',\n      button,\n      x: this._x,\n      y: this._y,\n      modifiers: this._keyboard._modifiers,\n      clickCount\n    });\n  }\n  /**\n   * Dispatches a `mousewheel` event.\n   * @param options - Optional: `MouseWheelOptions`.\n   *\n   * @example\n   * An example of zooming into an element:\n   * ```js\n   * await page.goto('https://mdn.mozillademos.org/en-US/docs/Web/API/Element/wheel_event$samples/Scaling_an_element_via_the_wheel?revision=1587366');\n   *\n   * const elem = await page.$('div');\n   * const boundingBox = await elem.boundingBox();\n   * await page.mouse.move(\n   *   boundingBox.x + boundingBox.width / 2,\n   *   boundingBox.y + boundingBox.height / 2\n   * );\n   *\n   * await page.mouse.wheel({ deltaY: -100 })\n   * ```\n   */\n\n\n  async wheel(options = {}) {\n    const {\n      deltaX = 0,\n      deltaY = 0\n    } = options;\n    await this._client.send('Input.dispatchMouseEvent', {\n      type: 'mouseWheel',\n      x: this._x,\n      y: this._y,\n      deltaX,\n      deltaY,\n      modifiers: this._keyboard._modifiers,\n      pointerType: 'mouse'\n    });\n  }\n\n}\n\nexports.Mouse = Mouse;\n/**\n * The Touchscreen class exposes touchscreen events.\n * @public\n */\n\nclass Touchscreen {\n  /**\n   * @internal\n   */\n  constructor(client, keyboard) {\n    this._client = client;\n    this._keyboard = keyboard;\n  }\n  /**\n   * Dispatches a `touchstart` and `touchend` event.\n   * @param x - Horizontal position of the tap.\n   * @param y - Vertical position of the tap.\n   */\n\n\n  async tap(x, y) {\n    const touchPoints = [{\n      x: Math.round(x),\n      y: Math.round(y)\n    }];\n    await this._client.send('Input.dispatchTouchEvent', {\n      type: 'touchStart',\n      touchPoints,\n      modifiers: this._keyboard._modifiers\n    });\n    await this._client.send('Input.dispatchTouchEvent', {\n      type: 'touchEnd',\n      touchPoints: [],\n      modifiers: this._keyboard._modifiers\n    });\n  }\n\n}\n\nexports.Touchscreen = Touchscreen;","map":{"version":3,"sources":["../../../../src/common/Input.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Touchscreen = exports.Mouse = exports.Keyboard = void 0;\nconst assert_js_1 = require(\"./assert.js\");\nconst USKeyboardLayout_js_1 = require(\"./USKeyboardLayout.js\");\n/**\n * Keyboard provides an api for managing a virtual keyboard.\n * The high level api is {@link Keyboard.\"type\"},\n * which takes raw characters and generates proper keydown, keypress/input,\n * and keyup events on your page.\n *\n * @remarks\n * For finer control, you can use {@link Keyboard.down},\n * {@link Keyboard.up}, and {@link Keyboard.sendCharacter}\n * to manually fire events as if they were generated from a real keyboard.\n *\n * On MacOS, keyboard shortcuts like `⌘ A` -\\> Select All do not work.\n * See {@link https://github.com/puppeteer/puppeteer/issues/1313 | #1313}.\n *\n * @example\n * An example of holding down `Shift` in order to select and delete some text:\n * ```js\n * await page.keyboard.type('Hello World!');\n * await page.keyboard.press('ArrowLeft');\n *\n * await page.keyboard.down('Shift');\n * for (let i = 0; i < ' World'.length; i++)\n *   await page.keyboard.press('ArrowLeft');\n * await page.keyboard.up('Shift');\n *\n * await page.keyboard.press('Backspace');\n * // Result text will end up saying 'Hello!'\n * ```\n *\n * @example\n * An example of pressing `A`\n * ```js\n * await page.keyboard.down('Shift');\n * await page.keyboard.press('KeyA');\n * await page.keyboard.up('Shift');\n * ```\n *\n * @public\n */\nclass Keyboard {\n    /** @internal */\n    constructor(client) {\n        /** @internal */\n        this._modifiers = 0;\n        this._pressedKeys = new Set();\n        this._client = client;\n    }\n    /**\n     * Dispatches a `keydown` event.\n     *\n     * @remarks\n     * If `key` is a single character and no modifier keys besides `Shift`\n     * are being held down, a `keypress`/`input` event will also generated.\n     * The `text` option can be specified to force an input event to be generated.\n     * If `key` is a modifier key, `Shift`, `Meta`, `Control`, or `Alt`,\n     * subsequent key presses will be sent with that modifier active.\n     * To release the modifier key, use {@link Keyboard.up}.\n     *\n     * After the key is pressed once, subsequent calls to\n     * {@link Keyboard.down} will have\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat | repeat}\n     * set to true. To release the key, use {@link Keyboard.up}.\n     *\n     * Modifier keys DO influence {@link Keyboard.down}.\n     * Holding down `Shift` will type the text in upper case.\n     *\n     * @param key - Name of key to press, such as `ArrowLeft`.\n     * See {@link KeyInput} for a list of all key names.\n     *\n     * @param options - An object of options. Accepts text which, if specified,\n     * generates an input event with this text.\n     */\n    async down(key, options = { text: undefined }) {\n        const description = this._keyDescriptionForString(key);\n        const autoRepeat = this._pressedKeys.has(description.code);\n        this._pressedKeys.add(description.code);\n        this._modifiers |= this._modifierBit(description.key);\n        const text = options.text === undefined ? description.text : options.text;\n        await this._client.send('Input.dispatchKeyEvent', {\n            type: text ? 'keyDown' : 'rawKeyDown',\n            modifiers: this._modifiers,\n            windowsVirtualKeyCode: description.keyCode,\n            code: description.code,\n            key: description.key,\n            text: text,\n            unmodifiedText: text,\n            autoRepeat,\n            location: description.location,\n            isKeypad: description.location === 3,\n        });\n    }\n    _modifierBit(key) {\n        if (key === 'Alt')\n            return 1;\n        if (key === 'Control')\n            return 2;\n        if (key === 'Meta')\n            return 4;\n        if (key === 'Shift')\n            return 8;\n        return 0;\n    }\n    _keyDescriptionForString(keyString) {\n        const shift = this._modifiers & 8;\n        const description = {\n            key: '',\n            keyCode: 0,\n            code: '',\n            text: '',\n            location: 0,\n        };\n        const definition = USKeyboardLayout_js_1.keyDefinitions[keyString];\n        assert_js_1.assert(definition, `Unknown key: \"${keyString}\"`);\n        if (definition.key)\n            description.key = definition.key;\n        if (shift && definition.shiftKey)\n            description.key = definition.shiftKey;\n        if (definition.keyCode)\n            description.keyCode = definition.keyCode;\n        if (shift && definition.shiftKeyCode)\n            description.keyCode = definition.shiftKeyCode;\n        if (definition.code)\n            description.code = definition.code;\n        if (definition.location)\n            description.location = definition.location;\n        if (description.key.length === 1)\n            description.text = description.key;\n        if (definition.text)\n            description.text = definition.text;\n        if (shift && definition.shiftText)\n            description.text = definition.shiftText;\n        // if any modifiers besides shift are pressed, no text should be sent\n        if (this._modifiers & ~8)\n            description.text = '';\n        return description;\n    }\n    /**\n     * Dispatches a `keyup` event.\n     *\n     * @param key - Name of key to release, such as `ArrowLeft`.\n     * See {@link KeyInput | KeyInput}\n     * for a list of all key names.\n     */\n    async up(key) {\n        const description = this._keyDescriptionForString(key);\n        this._modifiers &= ~this._modifierBit(description.key);\n        this._pressedKeys.delete(description.code);\n        await this._client.send('Input.dispatchKeyEvent', {\n            type: 'keyUp',\n            modifiers: this._modifiers,\n            key: description.key,\n            windowsVirtualKeyCode: description.keyCode,\n            code: description.code,\n            location: description.location,\n        });\n    }\n    /**\n     * Dispatches a `keypress` and `input` event.\n     * This does not send a `keydown` or `keyup` event.\n     *\n     * @remarks\n     * Modifier keys DO NOT effect {@link Keyboard.sendCharacter | Keyboard.sendCharacter}.\n     * Holding down `Shift` will not type the text in upper case.\n     *\n     * @example\n     * ```js\n     * page.keyboard.sendCharacter('嗨');\n     * ```\n     *\n     * @param char - Character to send into the page.\n     */\n    async sendCharacter(char) {\n        await this._client.send('Input.insertText', { text: char });\n    }\n    charIsKey(char) {\n        return !!USKeyboardLayout_js_1.keyDefinitions[char];\n    }\n    /**\n     * Sends a `keydown`, `keypress`/`input`,\n     * and `keyup` event for each character in the text.\n     *\n     * @remarks\n     * To press a special key, like `Control` or `ArrowDown`,\n     * use {@link Keyboard.press}.\n     *\n     * Modifier keys DO NOT effect `keyboard.type`.\n     * Holding down `Shift` will not type the text in upper case.\n     *\n     * @example\n     * ```js\n     * await page.keyboard.type('Hello'); // Types instantly\n     * await page.keyboard.type('World', {delay: 100}); // Types slower, like a user\n     * ```\n     *\n     * @param text - A text to type into a focused element.\n     * @param options - An object of options. Accepts delay which,\n     * if specified, is the time to wait between `keydown` and `keyup` in milliseconds.\n     * Defaults to 0.\n     */\n    async type(text, options = {}) {\n        const delay = options.delay || null;\n        for (const char of text) {\n            if (this.charIsKey(char)) {\n                await this.press(char, { delay });\n            }\n            else {\n                if (delay)\n                    await new Promise((f) => setTimeout(f, delay));\n                await this.sendCharacter(char);\n            }\n        }\n    }\n    /**\n     * Shortcut for {@link Keyboard.down}\n     * and {@link Keyboard.up}.\n     *\n     * @remarks\n     * If `key` is a single character and no modifier keys besides `Shift`\n     * are being held down, a `keypress`/`input` event will also generated.\n     * The `text` option can be specified to force an input event to be generated.\n     *\n     * Modifier keys DO effect {@link Keyboard.press}.\n     * Holding down `Shift` will type the text in upper case.\n     *\n     * @param key - Name of key to press, such as `ArrowLeft`.\n     * See {@link KeyInput} for a list of all key names.\n     *\n     * @param options - An object of options. Accepts text which, if specified,\n     * generates an input event with this text. Accepts delay which,\n     * if specified, is the time to wait between `keydown` and `keyup` in milliseconds.\n     * Defaults to 0.\n     */\n    async press(key, options = {}) {\n        const { delay = null } = options;\n        await this.down(key, options);\n        if (delay)\n            await new Promise((f) => setTimeout(f, options.delay));\n        await this.up(key);\n    }\n}\nexports.Keyboard = Keyboard;\n/**\n * The Mouse class operates in main-frame CSS pixels\n * relative to the top-left corner of the viewport.\n * @remarks\n * Every `page` object has its own Mouse, accessible with [`page.mouse`](#pagemouse).\n *\n * @example\n * ```js\n * // Using ‘page.mouse’ to trace a 100x100 square.\n * await page.mouse.move(0, 0);\n * await page.mouse.down();\n * await page.mouse.move(0, 100);\n * await page.mouse.move(100, 100);\n * await page.mouse.move(100, 0);\n * await page.mouse.move(0, 0);\n * await page.mouse.up();\n * ```\n *\n * **Note**: The mouse events trigger synthetic `MouseEvent`s.\n * This means that it does not fully replicate the functionality of what a normal user\n * would be able to do with their mouse.\n *\n * For example, dragging and selecting text is not possible using `page.mouse`.\n * Instead, you can use the {@link https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/getSelection | `DocumentOrShadowRoot.getSelection()`} functionality implemented in the platform.\n *\n * @example\n * For example, if you want to select all content between nodes:\n * ```js\n * await page.evaluate((from, to) => {\n *   const selection = from.getRootNode().getSelection();\n *   const range = document.createRange();\n *   range.setStartBefore(from);\n *   range.setEndAfter(to);\n *   selection.removeAllRanges();\n *   selection.addRange(range);\n * }, fromJSHandle, toJSHandle);\n * ```\n * If you then would want to copy-paste your selection, you can use the clipboard api:\n * ```js\n * // The clipboard api does not allow you to copy, unless the tab is focused.\n * await page.bringToFront();\n * await page.evaluate(() => {\n *   // Copy the selected content to the clipboard\n *   document.execCommand('copy');\n *   // Obtain the content of the clipboard as a string\n *   return navigator.clipboard.readText();\n * });\n * ```\n * **Note**: If you want access to the clipboard API,\n * you have to give it permission to do so:\n * ```js\n * await browser.defaultBrowserContext().overridePermissions(\n *   '<your origin>', ['clipboard-read', 'clipboard-write']\n * );\n * ```\n * @public\n */\nclass Mouse {\n    /**\n     * @internal\n     */\n    constructor(client, keyboard) {\n        this._x = 0;\n        this._y = 0;\n        this._button = 'none';\n        this._client = client;\n        this._keyboard = keyboard;\n    }\n    /**\n     * Dispatches a `mousemove` event.\n     * @param x - Horizontal position of the mouse.\n     * @param y - Vertical position of the mouse.\n     * @param options - Optional object. If specified, the `steps` property\n     * sends intermediate `mousemove` events when set to `1` (default).\n     */\n    async move(x, y, options = {}) {\n        const { steps = 1 } = options;\n        const fromX = this._x, fromY = this._y;\n        this._x = x;\n        this._y = y;\n        for (let i = 1; i <= steps; i++) {\n            await this._client.send('Input.dispatchMouseEvent', {\n                type: 'mouseMoved',\n                button: this._button,\n                x: fromX + (this._x - fromX) * (i / steps),\n                y: fromY + (this._y - fromY) * (i / steps),\n                modifiers: this._keyboard._modifiers,\n            });\n        }\n    }\n    /**\n     * Shortcut for `mouse.move`, `mouse.down` and `mouse.up`.\n     * @param x - Horizontal position of the mouse.\n     * @param y - Vertical position of the mouse.\n     * @param options - Optional `MouseOptions`.\n     */\n    async click(x, y, options = {}) {\n        const { delay = null } = options;\n        if (delay !== null) {\n            await Promise.all([this.move(x, y), this.down(options)]);\n            await new Promise((f) => setTimeout(f, delay));\n            await this.up(options);\n        }\n        else {\n            await Promise.all([\n                this.move(x, y),\n                this.down(options),\n                this.up(options),\n            ]);\n        }\n    }\n    /**\n     * Dispatches a `mousedown` event.\n     * @param options - Optional `MouseOptions`.\n     */\n    async down(options = {}) {\n        const { button = 'left', clickCount = 1 } = options;\n        this._button = button;\n        await this._client.send('Input.dispatchMouseEvent', {\n            type: 'mousePressed',\n            button,\n            x: this._x,\n            y: this._y,\n            modifiers: this._keyboard._modifiers,\n            clickCount,\n        });\n    }\n    /**\n     * Dispatches a `mouseup` event.\n     * @param options - Optional `MouseOptions`.\n     */\n    async up(options = {}) {\n        const { button = 'left', clickCount = 1 } = options;\n        this._button = 'none';\n        await this._client.send('Input.dispatchMouseEvent', {\n            type: 'mouseReleased',\n            button,\n            x: this._x,\n            y: this._y,\n            modifiers: this._keyboard._modifiers,\n            clickCount,\n        });\n    }\n    /**\n     * Dispatches a `mousewheel` event.\n     * @param options - Optional: `MouseWheelOptions`.\n     *\n     * @example\n     * An example of zooming into an element:\n     * ```js\n     * await page.goto('https://mdn.mozillademos.org/en-US/docs/Web/API/Element/wheel_event$samples/Scaling_an_element_via_the_wheel?revision=1587366');\n     *\n     * const elem = await page.$('div');\n     * const boundingBox = await elem.boundingBox();\n     * await page.mouse.move(\n     *   boundingBox.x + boundingBox.width / 2,\n     *   boundingBox.y + boundingBox.height / 2\n     * );\n     *\n     * await page.mouse.wheel({ deltaY: -100 })\n     * ```\n     */\n    async wheel(options = {}) {\n        const { deltaX = 0, deltaY = 0 } = options;\n        await this._client.send('Input.dispatchMouseEvent', {\n            type: 'mouseWheel',\n            x: this._x,\n            y: this._y,\n            deltaX,\n            deltaY,\n            modifiers: this._keyboard._modifiers,\n            pointerType: 'mouse',\n        });\n    }\n}\nexports.Mouse = Mouse;\n/**\n * The Touchscreen class exposes touchscreen events.\n * @public\n */\nclass Touchscreen {\n    /**\n     * @internal\n     */\n    constructor(client, keyboard) {\n        this._client = client;\n        this._keyboard = keyboard;\n    }\n    /**\n     * Dispatches a `touchstart` and `touchend` event.\n     * @param x - Horizontal position of the tap.\n     * @param y - Vertical position of the tap.\n     */\n    async tap(x, y) {\n        const touchPoints = [{ x: Math.round(x), y: Math.round(y) }];\n        await this._client.send('Input.dispatchTouchEvent', {\n            type: 'touchStart',\n            touchPoints,\n            modifiers: this._keyboard._modifiers,\n        });\n        await this._client.send('Input.dispatchTouchEvent', {\n            type: 'touchEnd',\n            touchPoints: [],\n            modifiers: this._keyboard._modifiers,\n        });\n    }\n}\nexports.Touchscreen = Touchscreen;\n//# sourceMappingURL=Input.js.map"]},"metadata":{},"sourceType":"script"}