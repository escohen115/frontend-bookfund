{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CDPSession = exports.CDPSessionEmittedEvents = exports.Connection = exports.ConnectionEmittedEvents = void 0;\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst assert_js_1 = require(\"./assert.js\");\n\nconst Debug_js_1 = require(\"./Debug.js\");\n\nconst debugProtocolSend = Debug_js_1.debug('puppeteer:protocol:SEND ►');\nconst debugProtocolReceive = Debug_js_1.debug('puppeteer:protocol:RECV ◀');\n\nconst EventEmitter_js_1 = require(\"./EventEmitter.js\");\n/**\n * Internal events that the Connection class emits.\n *\n * @internal\n */\n\n\nexports.ConnectionEmittedEvents = {\n  Disconnected: Symbol('Connection.Disconnected')\n};\n/**\n * @internal\n */\n\nclass Connection extends EventEmitter_js_1.EventEmitter {\n  constructor(url, transport, delay = 0) {\n    super();\n    this._lastId = 0;\n    this._sessions = new Map();\n    this._closed = false;\n    this._callbacks = new Map();\n    this._url = url;\n    this._delay = delay;\n    this._transport = transport;\n    this._transport.onmessage = this._onMessage.bind(this);\n    this._transport.onclose = this._onClose.bind(this);\n  }\n\n  static fromSession(session) {\n    return session._connection;\n  }\n  /**\n   * @param {string} sessionId\n   * @returns {?CDPSession}\n   */\n\n\n  session(sessionId) {\n    return this._sessions.get(sessionId) || null;\n  }\n\n  url() {\n    return this._url;\n  }\n\n  send(method, ...paramArgs) {\n    // There is only ever 1 param arg passed, but the Protocol defines it as an\n    // array of 0 or 1 items See this comment:\n    // https://github.com/ChromeDevTools/devtools-protocol/pull/113#issuecomment-412603285\n    // which explains why the protocol defines the params this way for better\n    // type-inference.\n    // So now we check if there are any params or not and deal with them accordingly.\n    const params = paramArgs.length ? paramArgs[0] : undefined;\n\n    const id = this._rawSend({\n      method,\n      params\n    });\n\n    return new Promise((resolve, reject) => {\n      this._callbacks.set(id, {\n        resolve,\n        reject,\n        error: new Error(),\n        method\n      });\n    });\n  }\n\n  _rawSend(message) {\n    const id = ++this._lastId;\n    const stringifiedMessage = JSON.stringify(Object.assign({}, message, {\n      id\n    }));\n    debugProtocolSend(stringifiedMessage);\n\n    this._transport.send(stringifiedMessage);\n\n    return id;\n  }\n\n  async _onMessage(message) {\n    if (this._delay) await new Promise(f => setTimeout(f, this._delay));\n    debugProtocolReceive(message);\n    const object = JSON.parse(message);\n\n    if (object.method === 'Target.attachedToTarget') {\n      const sessionId = object.params.sessionId;\n      const session = new CDPSession(this, object.params.targetInfo.type, sessionId);\n\n      this._sessions.set(sessionId, session);\n    } else if (object.method === 'Target.detachedFromTarget') {\n      const session = this._sessions.get(object.params.sessionId);\n\n      if (session) {\n        session._onClosed();\n\n        this._sessions.delete(object.params.sessionId);\n      }\n    }\n\n    if (object.sessionId) {\n      const session = this._sessions.get(object.sessionId);\n\n      if (session) session._onMessage(object);\n    } else if (object.id) {\n      const callback = this._callbacks.get(object.id); // Callbacks could be all rejected if someone has called `.dispose()`.\n\n\n      if (callback) {\n        this._callbacks.delete(object.id);\n\n        if (object.error) callback.reject(createProtocolError(callback.error, callback.method, object));else callback.resolve(object.result);\n      }\n    } else {\n      this.emit(object.method, object.params);\n    }\n  }\n\n  _onClose() {\n    if (this._closed) return;\n    this._closed = true;\n    this._transport.onmessage = null;\n    this._transport.onclose = null;\n\n    for (const callback of this._callbacks.values()) callback.reject(rewriteError(callback.error, `Protocol error (${callback.method}): Target closed.`));\n\n    this._callbacks.clear();\n\n    for (const session of this._sessions.values()) session._onClosed();\n\n    this._sessions.clear();\n\n    this.emit(exports.ConnectionEmittedEvents.Disconnected);\n  }\n\n  dispose() {\n    this._onClose();\n\n    this._transport.close();\n  }\n  /**\n   * @param {Protocol.Target.TargetInfo} targetInfo\n   * @returns {!Promise<!CDPSession>}\n   */\n\n\n  async createSession(targetInfo) {\n    const {\n      sessionId\n    } = await this.send('Target.attachToTarget', {\n      targetId: targetInfo.targetId,\n      flatten: true\n    });\n    return this._sessions.get(sessionId);\n  }\n\n}\n\nexports.Connection = Connection;\n/**\n * Internal events that the CDPSession class emits.\n *\n * @internal\n */\n\nexports.CDPSessionEmittedEvents = {\n  Disconnected: Symbol('CDPSession.Disconnected')\n};\n/**\n * The `CDPSession` instances are used to talk raw Chrome Devtools Protocol.\n *\n * @remarks\n *\n * Protocol methods can be called with {@link CDPSession.send} method and protocol\n * events can be subscribed to with `CDPSession.on` method.\n *\n * Useful links: {@link https://chromedevtools.github.io/devtools-protocol/ | DevTools Protocol Viewer}\n * and {@link https://github.com/aslushnikov/getting-started-with-cdp/blob/master/README.md | Getting Started with DevTools Protocol}.\n *\n * @example\n * ```js\n * const client = await page.target().createCDPSession();\n * await client.send('Animation.enable');\n * client.on('Animation.animationCreated', () => console.log('Animation created!'));\n * const response = await client.send('Animation.getPlaybackRate');\n * console.log('playback rate is ' + response.playbackRate);\n * await client.send('Animation.setPlaybackRate', {\n *   playbackRate: response.playbackRate / 2\n * });\n * ```\n *\n * @public\n */\n\nclass CDPSession extends EventEmitter_js_1.EventEmitter {\n  /**\n   * @internal\n   */\n  constructor(connection, targetType, sessionId) {\n    super();\n    this._callbacks = new Map();\n    this._connection = connection;\n    this._targetType = targetType;\n    this._sessionId = sessionId;\n  }\n\n  send(method, ...paramArgs) {\n    if (!this._connection) return Promise.reject(new Error(`Protocol error (${method}): Session closed. Most likely the ${this._targetType} has been closed.`)); // See the comment in Connection#send explaining why we do this.\n\n    const params = paramArgs.length ? paramArgs[0] : undefined;\n\n    const id = this._connection._rawSend({\n      sessionId: this._sessionId,\n      method,\n\n      /* TODO(jacktfranklin@): once this Firefox bug is solved\n       * we no longer need the `|| {}` check\n       * https://bugzilla.mozilla.org/show_bug.cgi?id=1631570\n       */\n      params: params || {}\n    });\n\n    return new Promise((resolve, reject) => {\n      this._callbacks.set(id, {\n        resolve,\n        reject,\n        error: new Error(),\n        method\n      });\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  _onMessage(object) {\n    if (object.id && this._callbacks.has(object.id)) {\n      const callback = this._callbacks.get(object.id);\n\n      this._callbacks.delete(object.id);\n\n      if (object.error) callback.reject(createProtocolError(callback.error, callback.method, object));else callback.resolve(object.result);\n    } else {\n      assert_js_1.assert(!object.id);\n      this.emit(object.method, object.params);\n    }\n  }\n  /**\n   * Detaches the cdpSession from the target. Once detached, the cdpSession object\n   * won't emit any events and can't be used to send messages.\n   */\n\n\n  async detach() {\n    if (!this._connection) throw new Error(`Session already detached. Most likely the ${this._targetType} has been closed.`);\n    await this._connection.send('Target.detachFromTarget', {\n      sessionId: this._sessionId\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  _onClosed() {\n    for (const callback of this._callbacks.values()) callback.reject(rewriteError(callback.error, `Protocol error (${callback.method}): Target closed.`));\n\n    this._callbacks.clear();\n\n    this._connection = null;\n    this.emit(exports.CDPSessionEmittedEvents.Disconnected);\n  }\n\n}\n\nexports.CDPSession = CDPSession;\n/**\n * @param {!Error} error\n * @param {string} method\n * @param {{error: {message: string, data: any}}} object\n * @returns {!Error}\n */\n\nfunction createProtocolError(error, method, object) {\n  let message = `Protocol error (${method}): ${object.error.message}`;\n  if ('data' in object.error) message += ` ${object.error.data}`;\n  return rewriteError(error, message);\n}\n/**\n * @param {!Error} error\n * @param {string} message\n * @returns {!Error}\n */\n\n\nfunction rewriteError(error, message) {\n  error.message = message;\n  return error;\n}","map":{"version":3,"sources":["../../../../src/common/Connection.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CDPSession = exports.CDPSessionEmittedEvents = exports.Connection = exports.ConnectionEmittedEvents = void 0;\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst assert_js_1 = require(\"./assert.js\");\nconst Debug_js_1 = require(\"./Debug.js\");\nconst debugProtocolSend = Debug_js_1.debug('puppeteer:protocol:SEND ►');\nconst debugProtocolReceive = Debug_js_1.debug('puppeteer:protocol:RECV ◀');\nconst EventEmitter_js_1 = require(\"./EventEmitter.js\");\n/**\n * Internal events that the Connection class emits.\n *\n * @internal\n */\nexports.ConnectionEmittedEvents = {\n    Disconnected: Symbol('Connection.Disconnected'),\n};\n/**\n * @internal\n */\nclass Connection extends EventEmitter_js_1.EventEmitter {\n    constructor(url, transport, delay = 0) {\n        super();\n        this._lastId = 0;\n        this._sessions = new Map();\n        this._closed = false;\n        this._callbacks = new Map();\n        this._url = url;\n        this._delay = delay;\n        this._transport = transport;\n        this._transport.onmessage = this._onMessage.bind(this);\n        this._transport.onclose = this._onClose.bind(this);\n    }\n    static fromSession(session) {\n        return session._connection;\n    }\n    /**\n     * @param {string} sessionId\n     * @returns {?CDPSession}\n     */\n    session(sessionId) {\n        return this._sessions.get(sessionId) || null;\n    }\n    url() {\n        return this._url;\n    }\n    send(method, ...paramArgs) {\n        // There is only ever 1 param arg passed, but the Protocol defines it as an\n        // array of 0 or 1 items See this comment:\n        // https://github.com/ChromeDevTools/devtools-protocol/pull/113#issuecomment-412603285\n        // which explains why the protocol defines the params this way for better\n        // type-inference.\n        // So now we check if there are any params or not and deal with them accordingly.\n        const params = paramArgs.length ? paramArgs[0] : undefined;\n        const id = this._rawSend({ method, params });\n        return new Promise((resolve, reject) => {\n            this._callbacks.set(id, { resolve, reject, error: new Error(), method });\n        });\n    }\n    _rawSend(message) {\n        const id = ++this._lastId;\n        const stringifiedMessage = JSON.stringify(Object.assign({}, message, { id }));\n        debugProtocolSend(stringifiedMessage);\n        this._transport.send(stringifiedMessage);\n        return id;\n    }\n    async _onMessage(message) {\n        if (this._delay)\n            await new Promise((f) => setTimeout(f, this._delay));\n        debugProtocolReceive(message);\n        const object = JSON.parse(message);\n        if (object.method === 'Target.attachedToTarget') {\n            const sessionId = object.params.sessionId;\n            const session = new CDPSession(this, object.params.targetInfo.type, sessionId);\n            this._sessions.set(sessionId, session);\n        }\n        else if (object.method === 'Target.detachedFromTarget') {\n            const session = this._sessions.get(object.params.sessionId);\n            if (session) {\n                session._onClosed();\n                this._sessions.delete(object.params.sessionId);\n            }\n        }\n        if (object.sessionId) {\n            const session = this._sessions.get(object.sessionId);\n            if (session)\n                session._onMessage(object);\n        }\n        else if (object.id) {\n            const callback = this._callbacks.get(object.id);\n            // Callbacks could be all rejected if someone has called `.dispose()`.\n            if (callback) {\n                this._callbacks.delete(object.id);\n                if (object.error)\n                    callback.reject(createProtocolError(callback.error, callback.method, object));\n                else\n                    callback.resolve(object.result);\n            }\n        }\n        else {\n            this.emit(object.method, object.params);\n        }\n    }\n    _onClose() {\n        if (this._closed)\n            return;\n        this._closed = true;\n        this._transport.onmessage = null;\n        this._transport.onclose = null;\n        for (const callback of this._callbacks.values())\n            callback.reject(rewriteError(callback.error, `Protocol error (${callback.method}): Target closed.`));\n        this._callbacks.clear();\n        for (const session of this._sessions.values())\n            session._onClosed();\n        this._sessions.clear();\n        this.emit(exports.ConnectionEmittedEvents.Disconnected);\n    }\n    dispose() {\n        this._onClose();\n        this._transport.close();\n    }\n    /**\n     * @param {Protocol.Target.TargetInfo} targetInfo\n     * @returns {!Promise<!CDPSession>}\n     */\n    async createSession(targetInfo) {\n        const { sessionId } = await this.send('Target.attachToTarget', {\n            targetId: targetInfo.targetId,\n            flatten: true,\n        });\n        return this._sessions.get(sessionId);\n    }\n}\nexports.Connection = Connection;\n/**\n * Internal events that the CDPSession class emits.\n *\n * @internal\n */\nexports.CDPSessionEmittedEvents = {\n    Disconnected: Symbol('CDPSession.Disconnected'),\n};\n/**\n * The `CDPSession` instances are used to talk raw Chrome Devtools Protocol.\n *\n * @remarks\n *\n * Protocol methods can be called with {@link CDPSession.send} method and protocol\n * events can be subscribed to with `CDPSession.on` method.\n *\n * Useful links: {@link https://chromedevtools.github.io/devtools-protocol/ | DevTools Protocol Viewer}\n * and {@link https://github.com/aslushnikov/getting-started-with-cdp/blob/master/README.md | Getting Started with DevTools Protocol}.\n *\n * @example\n * ```js\n * const client = await page.target().createCDPSession();\n * await client.send('Animation.enable');\n * client.on('Animation.animationCreated', () => console.log('Animation created!'));\n * const response = await client.send('Animation.getPlaybackRate');\n * console.log('playback rate is ' + response.playbackRate);\n * await client.send('Animation.setPlaybackRate', {\n *   playbackRate: response.playbackRate / 2\n * });\n * ```\n *\n * @public\n */\nclass CDPSession extends EventEmitter_js_1.EventEmitter {\n    /**\n     * @internal\n     */\n    constructor(connection, targetType, sessionId) {\n        super();\n        this._callbacks = new Map();\n        this._connection = connection;\n        this._targetType = targetType;\n        this._sessionId = sessionId;\n    }\n    send(method, ...paramArgs) {\n        if (!this._connection)\n            return Promise.reject(new Error(`Protocol error (${method}): Session closed. Most likely the ${this._targetType} has been closed.`));\n        // See the comment in Connection#send explaining why we do this.\n        const params = paramArgs.length ? paramArgs[0] : undefined;\n        const id = this._connection._rawSend({\n            sessionId: this._sessionId,\n            method,\n            /* TODO(jacktfranklin@): once this Firefox bug is solved\n             * we no longer need the `|| {}` check\n             * https://bugzilla.mozilla.org/show_bug.cgi?id=1631570\n             */\n            params: params || {},\n        });\n        return new Promise((resolve, reject) => {\n            this._callbacks.set(id, { resolve, reject, error: new Error(), method });\n        });\n    }\n    /**\n     * @internal\n     */\n    _onMessage(object) {\n        if (object.id && this._callbacks.has(object.id)) {\n            const callback = this._callbacks.get(object.id);\n            this._callbacks.delete(object.id);\n            if (object.error)\n                callback.reject(createProtocolError(callback.error, callback.method, object));\n            else\n                callback.resolve(object.result);\n        }\n        else {\n            assert_js_1.assert(!object.id);\n            this.emit(object.method, object.params);\n        }\n    }\n    /**\n     * Detaches the cdpSession from the target. Once detached, the cdpSession object\n     * won't emit any events and can't be used to send messages.\n     */\n    async detach() {\n        if (!this._connection)\n            throw new Error(`Session already detached. Most likely the ${this._targetType} has been closed.`);\n        await this._connection.send('Target.detachFromTarget', {\n            sessionId: this._sessionId,\n        });\n    }\n    /**\n     * @internal\n     */\n    _onClosed() {\n        for (const callback of this._callbacks.values())\n            callback.reject(rewriteError(callback.error, `Protocol error (${callback.method}): Target closed.`));\n        this._callbacks.clear();\n        this._connection = null;\n        this.emit(exports.CDPSessionEmittedEvents.Disconnected);\n    }\n}\nexports.CDPSession = CDPSession;\n/**\n * @param {!Error} error\n * @param {string} method\n * @param {{error: {message: string, data: any}}} object\n * @returns {!Error}\n */\nfunction createProtocolError(error, method, object) {\n    let message = `Protocol error (${method}): ${object.error.message}`;\n    if ('data' in object.error)\n        message += ` ${object.error.data}`;\n    return rewriteError(error, message);\n}\n/**\n * @param {!Error} error\n * @param {string} message\n * @returns {!Error}\n */\nfunction rewriteError(error, message) {\n    error.message = message;\n    return error;\n}\n//# sourceMappingURL=Connection.js.map"]},"metadata":{},"sourceType":"script"}