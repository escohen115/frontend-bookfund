{"ast":null,"code":"var _jsxFileName = \"/Users/simoncohen/Flatiron/code/Mod5/bookfund/frontend-bookfund/bookfund/src/components/pages/BookPage/ReviewForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ReviewForm({\n  user,\n  book,\n  setSavedBooks,\n  setWaitlistRequest,\n  waitlistRequest,\n  backEndBook,\n  setBackEndBook\n}) {\n  _s();\n\n  const [formState, setFormState] = useState({\n    text: \"\"\n  });\n\n  function handleChange(e) {\n    if (user) {\n      setFormState({\n        user_id: user.id,\n        book_id: book.id,\n        ...formState,\n        [e.target.name]: e.target.value\n      });\n    } else {\n      setFormState({});\n      alert(\"please sign in to leave a review\");\n    }\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    if (formState.text.length > 100) {\n      let confObj = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formState)\n      };\n      fetch('http://localhost:3000/reviews', confObj).then(data => {\n        setWaitlistRequest(!waitlistRequest);\n        setBackEndBook(true);\n        fetch(`http://localhost:3000/books`).then(response => response.json()).then(data => {\n          setSavedBooks(data);\n        });\n      });\n\n      if (waitingsFulfilled.length > 0) {\n        mostRecent = waitingsFulfilled.sort(function (a, b) {\n          // find most recent waiting\n          return b.id - a.id;\n        })[0];\n        foundBook = savedBooks.find(book => book.id === mostRecent.book_id); // find most recently received book based on most recent waiting\n\n        if (foundBook) {\n          foundReview = foundBook.reviews.find(review => review.user.id === user.id); // check if they left a review on it\n\n          if (foundReview) {\n            setReviewLeft(true);\n          } else {\n            setReviewLeft(false);\n          }\n        } else {\n          // if no book is on waiting list\n          setReviewLeft(true);\n        }\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"review-form\",\n      onSubmit: e => handleSubmit(e),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        name: \"rating\",\n        value: formState.value,\n        onChange: e => handleChange(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: formState.text,\n        name: \"text\",\n        rows: 3,\n        cols: 25,\n        onChange: e => handleChange(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this), formState.text.length < 100 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: \"red\"\n        },\n        children: \"Please leave a review with more than 100 characters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \" Submit \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ReviewForm, \"pvv3H2EsiXe9A6PBXj6GDtKBtLw=\");\n\n_c = ReviewForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReviewForm\");","map":{"version":3,"sources":["/Users/simoncohen/Flatiron/code/Mod5/bookfund/frontend-bookfund/bookfund/src/components/pages/BookPage/ReviewForm.js"],"names":["useState","ReviewForm","user","book","setSavedBooks","setWaitlistRequest","waitlistRequest","backEndBook","setBackEndBook","formState","setFormState","text","handleChange","e","user_id","id","book_id","target","name","value","alert","handleSubmit","preventDefault","length","confObj","method","headers","body","JSON","stringify","fetch","then","data","response","json","waitingsFulfilled","mostRecent","sort","a","b","foundBook","savedBooks","find","foundReview","reviews","review","setReviewLeft","color"],"mappings":"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","sourcesContent":["import {useState } from \"react\";\n\nexport default function ReviewForm ({user, book, setSavedBooks, setWaitlistRequest, waitlistRequest, backEndBook, setBackEndBook}){\n\n    const [formState, setFormState] = useState({\n        text: \"\"\n    })\n\n    function handleChange(e){\n        if (user){\n            setFormState({\n                user_id: user.id, \n                book_id: book.id,\n                ...formState,\n                [e.target.name] : e.target.value\n            })\n        }\n        else{\n            setFormState({})\n            alert(\"please sign in to leave a review\")\n        }\n    }\n\n    function handleSubmit(e){\n        e.preventDefault()\n        if (formState.text.length > 100){\n            let confObj = {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify(formState),\n                }\n            fetch('http://localhost:3000/reviews', confObj)\n            .then(data=>{\n                setWaitlistRequest(!waitlistRequest)\n                setBackEndBook(true)\n                fetch(`http://localhost:3000/books`)\n                .then(response=>response.json())\n                .then(data=>{setSavedBooks(data)})\n            })\n\n        if (waitingsFulfilled.length > 0){\n            mostRecent = (waitingsFulfilled.sort(function (a, b){ // find most recent waiting\n                return b.id - a.id\n            })[0])\n                foundBook = savedBooks.find(book=>book.id===mostRecent.book_id) // find most recently received book based on most recent waiting\n                if (foundBook){\n                    foundReview = foundBook.reviews.find(review=>review.user.id===user.id) // check if they left a review on it\n                    if (foundReview){\n                        setReviewLeft(true)\n                    }\n                    else{\n                        setReviewLeft(false)\n                    }\n                }\n                else{ // if no book is on waiting list\n                    setReviewLeft(true)\n                }\n        }\n        }\n    }\n\n    return (\n    <div>\n        <form id=\"review-form\" onSubmit={e=>handleSubmit(e)} >\n            <input \n                type=\"number\" \n                name=\"rating\" \n                value={formState.value}\n                onChange={e=>handleChange(e)}/>\n            <textarea   \n                value={formState.text}\n                name=\"text\"             \n                rows={3}\n                cols={25}\n                onChange={e=>handleChange(e)}\n            />\n            {formState.text.length < 100 ? (\n            <p style={{ color: \"red\" }}>Please leave a review with more than 100 characters</p>\n            ) : null}\n            <button type='submit'> Submit </button>\n        </form>\n        \n    </div> \n    )\n    \n}"]},"metadata":{},"sourceType":"module"}