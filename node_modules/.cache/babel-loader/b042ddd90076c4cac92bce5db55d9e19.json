{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Tracing = void 0;\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst assert_js_1 = require(\"./assert.js\");\n\nconst helper_js_1 = require(\"./helper.js\");\n/**\n * The Tracing class exposes the tracing audit interface.\n * @remarks\n * You can use `tracing.start` and `tracing.stop` to create a trace file\n * which can be opened in Chrome DevTools or {@link https://chromedevtools.github.io/timeline-viewer/ | timeline viewer}.\n *\n * @example\n * ```js\n * await page.tracing.start({path: 'trace.json'});\n * await page.goto('https://www.google.com');\n * await page.tracing.stop();\n * ```\n *\n * @public\n */\n\n\nclass Tracing {\n  /**\n   * @internal\n   */\n  constructor(client) {\n    this._recording = false;\n    this._path = '';\n    this._client = client;\n  }\n  /**\n   * Starts a trace for the current page.\n   * @remarks\n   * Only one trace can be active at a time per browser.\n   * @param options - Optional `TracingOptions`.\n   */\n\n\n  async start(options = {}) {\n    assert_js_1.assert(!this._recording, 'Cannot start recording trace while already recording trace.');\n    const defaultCategories = ['-*', 'devtools.timeline', 'v8.execute', 'disabled-by-default-devtools.timeline', 'disabled-by-default-devtools.timeline.frame', 'toplevel', 'blink.console', 'blink.user_timing', 'latencyInfo', 'disabled-by-default-devtools.timeline.stack', 'disabled-by-default-v8.cpu_profiler', 'disabled-by-default-v8.cpu_profiler.hires'];\n    const {\n      path = null,\n      screenshots = false,\n      categories = defaultCategories\n    } = options;\n    if (screenshots) categories.push('disabled-by-default-devtools.screenshot');\n    this._path = path;\n    this._recording = true;\n    await this._client.send('Tracing.start', {\n      transferMode: 'ReturnAsStream',\n      categories: categories.join(',')\n    });\n  }\n  /**\n   * Stops a trace started with the `start` method.\n   * @returns Promise which resolves to buffer with trace data.\n   */\n\n\n  async stop() {\n    let fulfill;\n    let reject;\n    const contentPromise = new Promise((x, y) => {\n      fulfill = x;\n      reject = y;\n    });\n\n    this._client.once('Tracing.tracingComplete', event => {\n      helper_js_1.helper.readProtocolStream(this._client, event.stream, this._path).then(fulfill, reject);\n    });\n\n    await this._client.send('Tracing.end');\n    this._recording = false;\n    return contentPromise;\n  }\n\n}\n\nexports.Tracing = Tracing;","map":{"version":3,"sources":["../../../../src/common/Tracing.ts"],"names":[],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;AAcG;;AACH,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AAYA;;;;;;;;;;;;;;AAcG;;;AACH,MAAa,OAAb,CAAoB;AAKlB;;AAEG;AACH,EAAA,WAAA,CAAY,MAAZ,EAA8B;AAN9B,SAAA,UAAA,GAAa,KAAb;AACA,SAAA,KAAA,GAAQ,EAAR;AAME,SAAK,OAAL,GAAe,MAAf;AACD;AAED;;;;;AAKG;;;AACQ,QAAL,KAAK,CAAC,OAAA,GAA0B,EAA3B,EAA6B;AACtC,IAAA,WAAA,CAAA,MAAA,CACE,CAAC,KAAK,UADR,EAEE,6DAFF;AAKA,UAAM,iBAAiB,GAAG,CACxB,IADwB,EAExB,mBAFwB,EAGxB,YAHwB,EAIxB,uCAJwB,EAKxB,6CALwB,EAMxB,UANwB,EAOxB,eAPwB,EAQxB,mBARwB,EASxB,aATwB,EAUxB,6CAVwB,EAWxB,qCAXwB,EAYxB,2CAZwB,CAA1B;AAcA,UAAM;AACJ,MAAA,IAAI,GAAG,IADH;AAEJ,MAAA,WAAW,GAAG,KAFV;AAGJ,MAAA,UAAU,GAAG;AAHT,QAIF,OAJJ;AAMA,QAAI,WAAJ,EAAiB,UAAU,CAAC,IAAX,CAAgB,yCAAhB;AAEjB,SAAK,KAAL,GAAa,IAAb;AACA,SAAK,UAAL,GAAkB,IAAlB;AACA,UAAM,KAAK,OAAL,CAAa,IAAb,CAAkB,eAAlB,EAAmC;AACvC,MAAA,YAAY,EAAE,gBADyB;AAEvC,MAAA,UAAU,EAAE,UAAU,CAAC,IAAX,CAAgB,GAAhB;AAF2B,KAAnC,CAAN;AAID;AAED;;;AAGG;;;AACO,QAAJ,IAAI,GAAA;AACR,QAAI,OAAJ;AACA,QAAI,MAAJ;AACA,UAAM,cAAc,GAAG,IAAI,OAAJ,CAAoB,CAAC,CAAD,EAAI,CAAJ,KAAS;AAClD,MAAA,OAAO,GAAG,CAAV;AACA,MAAA,MAAM,GAAG,CAAT;AACD,KAHsB,CAAvB;;AAIA,SAAK,OAAL,CAAa,IAAb,CAAkB,yBAAlB,EAA8C,KAAD,IAAU;AACrD,MAAA,WAAA,CAAA,MAAA,CACG,kBADH,CACsB,KAAK,OAD3B,EACoC,KAAK,CAAC,MAD1C,EACkD,KAAK,KADvD,EAEG,IAFH,CAEQ,OAFR,EAEiB,MAFjB;AAGD,KAJD;;AAKA,UAAM,KAAK,OAAL,CAAa,IAAb,CAAkB,aAAlB,CAAN;AACA,SAAK,UAAL,GAAkB,KAAlB;AACA,WAAO,cAAP;AACD;;AAzEiB;;AAApB,OAAA,CAAA,OAAA,GAAA,OAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tracing = void 0;\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst assert_js_1 = require(\"./assert.js\");\nconst helper_js_1 = require(\"./helper.js\");\n/**\n * The Tracing class exposes the tracing audit interface.\n * @remarks\n * You can use `tracing.start` and `tracing.stop` to create a trace file\n * which can be opened in Chrome DevTools or {@link https://chromedevtools.github.io/timeline-viewer/ | timeline viewer}.\n *\n * @example\n * ```js\n * await page.tracing.start({path: 'trace.json'});\n * await page.goto('https://www.google.com');\n * await page.tracing.stop();\n * ```\n *\n * @public\n */\nclass Tracing {\n    /**\n     * @internal\n     */\n    constructor(client) {\n        this._recording = false;\n        this._path = '';\n        this._client = client;\n    }\n    /**\n     * Starts a trace for the current page.\n     * @remarks\n     * Only one trace can be active at a time per browser.\n     * @param options - Optional `TracingOptions`.\n     */\n    async start(options = {}) {\n        assert_js_1.assert(!this._recording, 'Cannot start recording trace while already recording trace.');\n        const defaultCategories = [\n            '-*',\n            'devtools.timeline',\n            'v8.execute',\n            'disabled-by-default-devtools.timeline',\n            'disabled-by-default-devtools.timeline.frame',\n            'toplevel',\n            'blink.console',\n            'blink.user_timing',\n            'latencyInfo',\n            'disabled-by-default-devtools.timeline.stack',\n            'disabled-by-default-v8.cpu_profiler',\n            'disabled-by-default-v8.cpu_profiler.hires',\n        ];\n        const { path = null, screenshots = false, categories = defaultCategories, } = options;\n        if (screenshots)\n            categories.push('disabled-by-default-devtools.screenshot');\n        this._path = path;\n        this._recording = true;\n        await this._client.send('Tracing.start', {\n            transferMode: 'ReturnAsStream',\n            categories: categories.join(','),\n        });\n    }\n    /**\n     * Stops a trace started with the `start` method.\n     * @returns Promise which resolves to buffer with trace data.\n     */\n    async stop() {\n        let fulfill;\n        let reject;\n        const contentPromise = new Promise((x, y) => {\n            fulfill = x;\n            reject = y;\n        });\n        this._client.once('Tracing.tracingComplete', (event) => {\n            helper_js_1.helper\n                .readProtocolStream(this._client, event.stream, this._path)\n                .then(fulfill, reject);\n        });\n        await this._client.send('Tracing.end');\n        this._recording = false;\n        return contentPromise;\n    }\n}\nexports.Tracing = Tracing;\n//# sourceMappingURL=Tracing.js.map"]},"metadata":{},"sourceType":"script"}