{"ast":null,"code":"var _jsxFileName = \"/Users/simoncohen/Flatiron/code/Mod5/bookfund/frontend-bookfund/bookfund/src/components/pages/UserPage/WaitList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Card, Button } from 'semantic-ui-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function WaitList({\n  waitlistMapped,\n  user\n}) {\n  _s();\n\n  const [waitlistIndex, setWaitlistIndex] = useState(0);\n  let waitingsMapped = []; //get all unfulfilled waitings for a user\n\n  let waitingsUnfulfilled = user.waitings.filter(waiting => waiting.fulfilled !== true); //create an array of those books by comparing to saved books\n\n  for (let i = 0; i < waitingsUnfulfilled.length; i++) {\n    waitingsMapped.push(savedBooks.find(saved_book => saved_book.id === waitingsUnfulfilled[i].book_id));\n  }\n\n  if (waitingsMapped.length > 0) {\n    waitlistMapped = waitingsMapped.map(waiting => {\n      //create JSX of books\n      return /*#__PURE__*/_jsxDEV(BackEndBookCard, {\n        book: waiting\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 21\n      }, this);\n    });\n  }\n\n  function handleNextClick() {\n    if (waitlistIndex < waitlistMapped.length) {\n      if (waitlistMapped.length - waitlistIndex > 8) {\n        setWaitlistIndex(waitlistIndex + 8);\n      } else {\n        setWaitlistIndex(0);\n      }\n    }\n  }\n\n  if (waitingsMapped.length > 0) {}\n}\n\n_s(WaitList, \"nO1a8Kz4Wau/bGgtJ5ykF4iTBLI=\");\n\n_c = WaitList;\n\nvar _c;\n\n$RefreshReg$(_c, \"WaitList\");","map":{"version":3,"sources":["/Users/simoncohen/Flatiron/code/Mod5/bookfund/frontend-bookfund/bookfund/src/components/pages/UserPage/WaitList.js"],"names":["React","useState","Card","Button","WaitList","waitlistMapped","user","waitlistIndex","setWaitlistIndex","waitingsMapped","waitingsUnfulfilled","waitings","filter","waiting","fulfilled","i","length","push","savedBooks","find","saved_book","id","book_id","map","handleNextClick"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,mBAA7B;;AAGA,eAAe,SAASC,QAAT,CAAkB;AAACC,EAAAA,cAAD;AAAiBC,EAAAA;AAAjB,CAAlB,EAAyC;AAAA;;AACpD,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCP,QAAQ,CAAC,CAAD,CAAlD;AAEA,MAAIQ,cAAc,GAAG,EAArB,CAHoD,CAKnD;;AACD,MAAIC,mBAAmB,GAAGJ,IAAI,CAACK,QAAL,CAAcC,MAAd,CAAqBC,OAAO,IAAEA,OAAO,CAACC,SAAR,KAAoB,IAAlD,CAA1B,CANoD,CAOpD;;AACA,OAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACL,mBAAmB,CAACM,MAAlC,EAAyCD,CAAC,EAA1C,EAA6C;AACzCN,IAAAA,cAAc,CAACQ,IAAf,CAAoBC,UAAU,CAACC,IAAX,CAAgBC,UAAU,IAAIA,UAAU,CAACC,EAAX,KAAkBX,mBAAmB,CAACK,CAAD,CAAnB,CAAuBO,OAAvE,CAApB;AACH;;AACD,MAAIb,cAAc,CAACO,MAAf,GAAwB,CAA5B,EAA8B;AAC1BX,IAAAA,cAAc,GAAGI,cAAc,CAACc,GAAf,CAAmBV,OAAO,IAAE;AAAE;AAC3C,0BAAQ,QAAC,eAAD;AAAiB,QAAA,IAAI,EAAEA;AAAvB;AAAA;AAAA;AAAA;AAAA,cAAR;AACH,KAFgB,CAAjB;AAGH;;AAID,WAASW,eAAT,GAA0B;AACtB,QAAIjB,aAAa,GAAGF,cAAc,CAACW,MAAnC,EAA0C;AACtC,UAAIX,cAAc,CAACW,MAAf,GAAwBT,aAAxB,GAAwC,CAA5C,EAA8C;AAC1CC,QAAAA,gBAAgB,CAACD,aAAa,GAAC,CAAf,CAAhB;AACH,OAFD,MAGI;AACJC,QAAAA,gBAAgB,CAAC,CAAD,CAAhB;AACC;AACJ;AACJ;;AACD,MAAIC,cAAc,CAACO,MAAf,GAAwB,CAA5B,EAA+B,CAE9B;AAEJ;;GAjCuBZ,Q;;KAAAA,Q","sourcesContent":["import React, { useState } from \"react\"\nimport { Card, Button } from 'semantic-ui-react'\n\n\nexport default function WaitList({waitlistMapped, user}){\n    const [waitlistIndex, setWaitlistIndex] = useState(0)\n\n    let waitingsMapped = []\n\n     //get all unfulfilled waitings for a user\n    let waitingsUnfulfilled = user.waitings.filter(waiting=>waiting.fulfilled!==true)\n    //create an array of those books by comparing to saved books\n    for(let i=0;i<waitingsUnfulfilled.length;i++){\n        waitingsMapped.push(savedBooks.find(saved_book => saved_book.id === waitingsUnfulfilled[i].book_id))\n    } \n    if (waitingsMapped.length > 0){\n        waitlistMapped = waitingsMapped.map(waiting=>{ //create JSX of books\n            return (<BackEndBookCard book={waiting}/>)\n        })\n    }\n       \n\n\n    function handleNextClick(){\n        if (waitlistIndex < waitlistMapped.length){\n            if (waitlistMapped.length - waitlistIndex > 8){\n                setWaitlistIndex(waitlistIndex+8)\n            }\n            else{\n            setWaitlistIndex(0)\n            }\n        }\n    }\n    if (waitingsMapped.length > 0 ){\n\n    }    \n    \n}"]},"metadata":{},"sourceType":"module"}