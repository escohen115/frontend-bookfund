{"ast":null,"code":"var _jsxFileName = \"/Users/simoncohen/Flatiron/code/Mod5/bookfund/frontend-bookfund/bookfund/src/components/pages/BookPage/BookPage.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function BookPage({\n  setSavedBooks,\n  savedBooks\n}) {\n  _s();\n\n  const [book, setBook] = useState(null);\n  const params = useParams();\n  let foundBook = null;\n  useEffect(() => {\n    foundBook = savedBooks.find(book => book.api_id === params.id); //find matching book from backend\n\n    setBook(foundBook); //set matching book to state\n\n    if (!book) {\n      //if the book was not found\n      console.log('not found');\n      fetch(`https://www.googleapis.com/books/v1/volumes/${params.id}`).then(response => response.json()).then(data => {\n        setBook({ ...book,\n          title: data.volumeInfo.title,\n          subtitle: data.volumeInfo.subtitle,\n          authors: data.volumeInfo.authors,\n          publisher: data.volumeInfo.publisher,\n          publishedDate: data.volumeInfo.publishedDate,\n          description: data.volumeInfo.description,\n          image_url: data.volumeInfo.imageLinks.thumbnail,\n          api_id: data.id,\n          waitings: false\n        });\n      });\n    }\n  }, []); // function waitListRequestAndStoreInDBRequest (){\n  //     let confObj = {\n  //         method: 'POST',\n  //         headers: {\n  //             'Content-Type': 'application/json',\n  //         },\n  //         body: JSON.stringify(formState),\n  //     }\n  //     fetch('http://localhost:3000/users', confObj)\n  //     .then(response=>response.json())\n  //     .then(data=>{\n  //         console.log(data)\n  //         if (data.error){\n  //             alert(\"Username must be unique\")\n  //         }\n  //         else{\n  //             setUser(data)\n  //         }\n  //     })\n  // }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: book ? book.image_url : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: book ? book.title : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: book ? book.subtitle : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"by: \", book ? book.authors : null, \" (\", book ? book.publishedDate : null, \") \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Publishing House: \", book ? book.publisher : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Description: \", book ? book.description : null, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(BookPage, \"BdE7h/IXV9ZyMRITUS+sTsE46jE=\", false, function () {\n  return [useParams];\n});\n\n_c = BookPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"BookPage\");","map":{"version":3,"sources":["/Users/simoncohen/Flatiron/code/Mod5/bookfund/frontend-bookfund/bookfund/src/components/pages/BookPage/BookPage.js"],"names":["useEffect","useState","useParams","BookPage","setSavedBooks","savedBooks","book","setBook","params","foundBook","find","api_id","id","console","log","fetch","then","response","json","data","title","volumeInfo","subtitle","authors","publisher","publishedDate","description","image_url","imageLinks","thumbnail","waitings"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,kBAA1B;;;AAEA,eAAe,SAASC,QAAT,CAAkB;AAACC,EAAAA,aAAD;AAAgBC,EAAAA;AAAhB,CAAlB,EAA8C;AAAA;;AAEzD,QAAK,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAE,IAAF,CAA/B;AACA,QAAMO,MAAM,GAAGN,SAAS,EAAxB;AACA,MAAIO,SAAS,GAAG,IAAhB;AAGAT,EAAAA,SAAS,CAAC,MAAI;AACVS,IAAAA,SAAS,GAAGJ,UAAU,CAACK,IAAX,CAAgBJ,IAAI,IAAEA,IAAI,CAACK,MAAL,KAAcH,MAAM,CAACI,EAA3C,CAAZ,CADU,CACiD;;AAC3DL,IAAAA,OAAO,CAACE,SAAD,CAAP,CAFU,CAES;;AACnB,QAAI,CAACH,IAAL,EAAU;AAAE;AACRO,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAC,MAAAA,KAAK,CAAE,+CAA8CP,MAAM,CAACI,EAAG,EAA1D,CAAL,CACCI,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,IAAI,IAAE;AACRZ,QAAAA,OAAO,CAAC,EACJ,GAAGD,IADC;AAEJc,UAAAA,KAAK,EAAED,IAAI,CAACE,UAAL,CAAgBD,KAFnB;AAGJE,UAAAA,QAAQ,EAAEH,IAAI,CAACE,UAAL,CAAgBC,QAHtB;AAIJC,UAAAA,OAAO,EAAEJ,IAAI,CAACE,UAAL,CAAgBE,OAJrB;AAKJC,UAAAA,SAAS,EAAEL,IAAI,CAACE,UAAL,CAAgBG,SALvB;AAMJC,UAAAA,aAAa,EAAEN,IAAI,CAACE,UAAL,CAAgBI,aAN3B;AAOJC,UAAAA,WAAW,EAAEP,IAAI,CAACE,UAAL,CAAgBK,WAPzB;AAQJC,UAAAA,SAAS,EAAER,IAAI,CAACE,UAAL,CAAgBO,UAAhB,CAA2BC,SARlC;AASJlB,UAAAA,MAAM,EAAEQ,IAAI,CAACP,EATT;AAUJkB,UAAAA,QAAQ,EAAE;AAVN,SAAD,CAAP;AAYH,OAfD;AAiBH;AAEJ,GAxBQ,EAwBP,EAxBO,CAAT,CAPyD,CAwCzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,sBACI;AAAA,4BAEI;AAAK,MAAA,GAAG,EAAGxB,IAAI,GAAGA,IAAI,CAACqB,SAAR,GAAmB;AAAlC;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAA,gBAAKrB,IAAI,GAAEA,IAAI,CAACc,KAAP,GAAc;AAAvB;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII;AAAA,gBAAKd,IAAI,GAAEA,IAAI,CAACgB,QAAP,GAAiB;AAA1B;AAAA;AAAA;AAAA;AAAA,YAJJ,eAKI;AAAA,yBAAQhB,IAAI,GAAEA,IAAI,CAACiB,OAAP,GAAgB,IAA5B,QAAoCjB,IAAI,GAAEA,IAAI,CAACmB,aAAP,GAAsB,IAA9D;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ,eAMI;AAAA,uCAAsBnB,IAAI,GAAEA,IAAI,CAACkB,SAAP,GAAkB,IAA5C;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ,eAOI;AAAA,kCAAiBlB,IAAI,GAAEA,IAAI,CAACoB,WAAP,GAAoB,IAAzC;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ;AAAA,kBADJ;AAgBH;;GA/EuBvB,Q;UAGLD,S;;;KAHKC,Q","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nexport default function BookPage({setSavedBooks, savedBooks}){\n\n    const[book, setBook] = useState (null)\n    const params = useParams()\n    let foundBook = null\n\n\n    useEffect(()=>{\n        foundBook = savedBooks.find(book=>book.api_id===params.id) //find matching book from backend\n        setBook(foundBook) //set matching book to state\n        if (!book){ //if the book was not found\n            console.log('not found')\n            fetch(`https://www.googleapis.com/books/v1/volumes/${params.id}`)\n            .then(response => response.json())\n            .then(data=>{\n                setBook({\n                    ...book,\n                    title: data.volumeInfo.title, \n                    subtitle: data.volumeInfo.subtitle, \n                    authors: data.volumeInfo.authors, \n                    publisher: data.volumeInfo.publisher, \n                    publishedDate: data.volumeInfo.publishedDate, \n                    description: data.volumeInfo.description, \n                    image_url: data.volumeInfo.imageLinks.thumbnail, \n                    api_id: data.id,\n                    waitings: false,\n                })\n            })\n\n        }\n    \n    },[])\n    \n\n    \n\n        \n  \n\n\n    // function waitListRequestAndStoreInDBRequest (){\n    //     let confObj = {\n    //         method: 'POST',\n    //         headers: {\n    //             'Content-Type': 'application/json',\n    //         },\n    //         body: JSON.stringify(formState),\n    //     }\n\n    //     fetch('http://localhost:3000/users', confObj)\n    //     .then(response=>response.json())\n    //     .then(data=>{\n    //         console.log(data)\n    //         if (data.error){\n    //             alert(\"Username must be unique\")\n    //         }\n    //         else{\n    //             setUser(data)\n    //         }\n    //     })\n    // }\n\n\n    return(\n        <>\n\n            <img src={ book ? book.image_url: null }></img>\n            <h2>{book? book.title: null}</h2>\n            <h3>{book? book.subtitle: null}</h3>\n            <p>by: {book? book.authors: null} ({book? book.publishedDate: null}) </p>\n            <p>Publishing House: {book? book.publisher: null}</p>\n            <p>Description: {book? book.description: null} </p>\n            {/* <p>Waitlist:{book.waitings ?  book.waitings : \"No on is waiting on this book yet\"}</p> */}\n\n            {/* <button onClick={waitListRequestAndStoreInDBRequest}>Jump on the Waitlist for this book</button> */}\n\n        </>\n    )\n\n}"]},"metadata":{},"sourceType":"module"}